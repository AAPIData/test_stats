# Dropping those indicators
state_edu <- state_edu %>% select(-check_hsless,
-check_hsged,
-check_somecollegeaa,
-check_bahigher)
state_edu <- state_edu %>% mutate(
pct_hsless   = est_hsless/est_totpop,
pct_bahigher = est_bahigher/ est_totpop)
## Creating Lookup for Pop_id
aapi_alone<- c(1,12,50)
aapi_combo<- c(1,31,60)
## Converting it to LONG format
state_edu_long<- state_edu %>% select(-geoid)  %>%
gather(estimate_type,
estimate,
-geodisplaylabel,
-pop_id)
## Recoding state_edu_long$pop_id
state_edu_long$pop_id_rec <- as.character(state_edu_long$pop_id)
state_edu_long$pop_id_rec <- fct_recode(state_edu_long$pop_id_rec,
"State Pop" = "1",
"Asian" = "12",
"Asian" = "31",
"NHPI" = "50",
"NHPI" = "60")
## Recoding state_edu_long$estimate_type into state_edu_long$estimate_type_rec
state_edu_long$estimate_type_rec <- fct_recode(state_edu_long$estimate_type,
"Total Pop" = "est_totpop",
"HS or Less" = "est_hsless",
"HS Diploma" = "est_hsged",
"Some College or AA" = "est_somecollegeaa",
"BA or Higher" = "est_bahigher",
"% HS or Less"= "pct_hsless",
"% BA or Higher" = "pct_bahigher")
state_edu_alone <- state_edu_long  %>% filter(pop_id %in% aapi_alone ) %>% select(-pop_id,-estimate_type)
state_edu_combo <- state_edu_long  %>% filter(pop_id %in% aapi_combo )%>% select(-pop_id,-estimate_type)
# Table for Just raw counts
state_create_table_raw <- function(data){
data %>% select(-starts_with("pct_"))
mutate(long_key=paste(pop_id_rec, estimate_type_rec, sep=": ")) %>% #Combining Pop_ID and Estimate type
select(-pop_id_rec, -estimate_type_rec) %>%
spread(long_key, estimate,fill = NA) %>%
rename(State= geodisplaylabel)
}
state_display_edu <- function(data){
data %>%
datatable(extensions =
list("Buttons" = NULL, 'FixedColumns'= T, "Scroller"=T),
rownames= FALSE,
options = list(
dom = 'rtB',
buttons = c('copy', 'csv', 'excel'),
scrollX = TRUE,
fixedColumns = list(leftColumns = 1),
columnDefs = list(list(className = 'dt-head-left')),
lengthMenu = c(25, 50, 100), pageLength = 50)) %>%
formatCurrency(columns = c(2:16),currency = "", interval = 3, mark = ",", digits=0)
}
## Using the function I created above to spread the data into the right format
state_edu_table<- state_create_table(state_edu_alone)
## Reordering columns (WE should be able to automate this, I got an error when I tried to include it in the function, not sure what the issue is though)
state_edu_table <- state_edu_table [c(1,16,15,14,13,12,2,3,4,5,7,8,9,10,11)]
## Passing the created table to the Display Table Function Created Above
state_display_edu(state_edu_table)
# Table for Just raw counts
state_create_table_raw <- function(data){
data %>% select(-starts_with("%"))
mutate(long_key=paste(pop_id_rec, estimate_type_rec, sep=": ")) %>% #Combining Pop_ID and Estimate type
select(-pop_id_rec, -estimate_type_rec) %>%
spread(long_key, estimate,fill = NA) %>%
rename(State= geodisplaylabel)
}
## Using the function I created above to spread the data into the right format
state_edu_table<- state_create_table(state_edu_alone)
## Reordering columns (WE should be able to automate this, I got an error when I tried to include it in the function, not sure what the issue is though)
state_edu_table <- state_edu_table [c(1,16,15,14,13,12,2,3,4,5,7,8,9,10,11)]
## Passing the created table to the Display Table Function Created Above
state_display_edu(state_edu_table)
state_edu_alone
View(state_edu_alone)
# Table for Just raw counts
state_create_table_raw <- function(data){
data %>% filter(-starts_with("%"))
mutate(long_key=paste(pop_id_rec, estimate_type_rec, sep=": ")) %>% #Combining Pop_ID and Estimate type
select(-pop_id_rec, -estimate_type_rec) %>%
spread(long_key, estimate,fill = NA) %>%
rename(State= geodisplaylabel)
}
## Using the function I created above to spread the data into the right format
state_edu_table<- state_create_table(state_edu_alone)
## Reordering columns (WE should be able to automate this, I got an error when I tried to include it in the function, not sure what the issue is though)
state_edu_table <- state_edu_table [c(1,16,15,14,13,12,2,3,4,5,7,8,9,10,11)]
## Passing the created table to the Display Table Function Created Above
state_display_edu(state_edu_table)
library(stringr)
# Table for Just raw counts
state_create_table_raw <- function(data){
data %>% filter(!startsWith(estimate_type_rec,"%"))
mutate(long_key=paste(pop_id_rec, estimate_type_rec, sep=": ")) %>% #Combining Pop_ID and Estimate type
select(-pop_id_rec, -estimate_type_rec) %>%
spread(long_key, estimate,fill = NA) %>%
rename(State= geodisplaylabel)
}
## Using the function I created above to spread the data into the right format
state_edu_table<- state_create_table(state_edu_alone)
## Reordering columns (WE should be able to automate this, I got an error when I tried to include it in the function, not sure what the issue is though)
state_edu_table <- state_edu_table [c(1,16,15,14,13,12,2,3,4,5,7,8,9,10,11)]
## Passing the created table to the Display Table Function Created Above
state_display_edu(state_edu_table)
state_edu_long
View(state_edu_alone)
state_edu_alone <- state_edu_long  %>% filter(pop_id %in% aapi_alone) %>% select(-pop_id,-estimate_type) %>% filter(estimate_type_rec !="% BA or Higher" | estimate_type_rec !="% HS or Less" )
View(state_edu_alone)
state_edu_alone <- state_edu_long  %>% filter(pop_id %in% aapi_alone) %>% select(-pop_id,-estimate_type) %>% filter(estimate_type_rec !="% BA or Higher" | estimate_type_rec != "% HS or Less" )
View(state_edu_alone)
state_edu_alone <- state_edu_long  %>% filter(pop_id %in% aapi_alone) %>% select(-pop_id,-estimate_type) %>% filter(estimate_type_rec !="% BA or Higher")
View(state_edu_alone)
state_edu_alone <- state_edu_long  %>%
filter(pop_id %in% aapi_alone) %>%
select(-pop_id,-estimate_type) %>%
filter(estimate_type_rec !="% BA or Higher") %>%
filter(estimate_type_rec !="% HS or Less")
View(state_edu_alone)
---
title: ''
output: html_document
---
```{r setup, include=FALSE}
## Loading Packages
library(forcats)
library(DT)
library(readxl)
library(tidyverse)
library(highcharter)
library(glue)
library(acs)
library(stringr)
## Setting Formatting for output
knitr::knit_hooks$set(inline = function(x) { if(!is.numeric(x)){ x }else{ prettyNum(round(x,2), big.mark=",", digits=6) } })
## Formatting for Graphics
hcoptslang <- getOption("highcharter.lang")
hcoptslang$thousandsSep <- ","
options(highcharter.lang = hcoptslang)
#Read in files
state_edu<- readxl::read_xlsx("raw_data/state/state_edu.xlsx")
state_edu$pop_id <- as.factor(state_edu$pop_id)
### Getting Rid of Estimates where the "CHECK" variable is flagging uncertainty
state_edu <- state_edu %>%
mutate(est_hsless =
case_when( check_hsless == 1 ~  NA_real_ ,TRUE ~ est_hsless),
est_hsged  =
case_when( check_hsged == 1 ~  NA_real_ ,TRUE ~ est_hsged),
est_somecollegeaa  =
case_when( check_somecollegeaa == 1 ~  NA_real_ ,TRUE ~ est_somecollegeaa),
est_bahigher  =
case_when( check_bahigher == 1 ~  NA_real_ ,TRUE ~ est_bahigher))
# Dropping those indicators
state_edu <- state_edu %>% select(-check_hsless,
-check_hsged,
-check_somecollegeaa,
-check_bahigher)
state_edu <- state_edu %>% mutate(
pct_hsless   = est_hsless/est_totpop,
pct_bahigher = est_bahigher/ est_totpop)
## Creating Lookup for Pop_id
aapi_alone<- c(1,12,50)
aapi_combo<- c(1,31,60)
## Converting it to LONG format
state_edu_long<- state_edu %>% select(-geoid)  %>%
gather(estimate_type,
estimate,
-geodisplaylabel,
-pop_id)
## Recoding state_edu_long$pop_id
state_edu_long$pop_id_rec <- as.character(state_edu_long$pop_id)
state_edu_long$pop_id_rec <- fct_recode(state_edu_long$pop_id_rec,
"State Pop" = "1",
"Asian" = "12",
"Asian" = "31",
"NHPI" = "50",
"NHPI" = "60")
## Recoding state_edu_long$estimate_type into state_edu_long$estimate_type_rec
state_edu_long$estimate_type_rec <- fct_recode(state_edu_long$estimate_type,
"Total Pop" = "est_totpop",
"HS or Less" = "est_hsless",
"HS Diploma" = "est_hsged",
"Some College or AA" = "est_somecollegeaa",
"BA or Higher" = "est_bahigher",
"% HS or Less"= "pct_hsless",
"% BA or Higher" = "pct_bahigher")
state_edu_alone_raw <- state_edu_long  %>%
filter(pop_id %in% aapi_alone) %>%
select(-pop_id,-estimate_type) %>%
filter(estimate_type_rec !="% BA or Higher") %>%
filter(estimate_type_rec !="% HS or Less")
state_edu_combo_raw <- state_edu_long  %>%
filter(pop_id %in% aapi_combo )%>%
select(-pop_id,-estimate_type)%>%
filter(estimate_type_rec !="% BA or Higher") %>%
filter(estimate_type_rec !="% HS or Less")
state_edu_alone_pct <- state_edu_long  %>%
filter(pop_id %in% aapi_alone) %>%
select(-pop_id,-estimate_type) %>%
filter(estimate_type_rec !="% BA or Higher") %>%
filter(estimate_type_rec !="% HS or Less")
state_edu_combo_pct <- state_edu_long  %>%
filter(pop_id %in% aapi_combo )%>%
select(-pop_id,-estimate_type)%>%
filter(estimate_type_rec =="% BA or Higher") %>%
filter(estimate_type_rec =="% HS or Less")
View(state_edu_combo_pct)
state_edu_alone_pct <- state_edu_long  %>%
filter(pop_id %in% aapi_alone) %>%
select(-pop_id,-estimate_type) %>%
filter(estimate_type_rec =="% BA or Higher" | estimate_type_rec =="% HS or Less") %>%
state_edu_combo_pct <- state_edu_long  %>%
filter(pop_id %in% aapi_combo )%>%
select(-pop_id,-estimate_type)%>%
filter(estimate_type_rec =="% BA or Higher" | estimate_type_rec =="% HS or Less") %>%
# Table for Just raw counts
state_create_table <- function(data){
data %>%
mutate(long_key=paste(pop_id_rec, estimate_type_rec, sep=": ")) %>% #Combining Pop_ID and Estimate type
select(-pop_id_rec, -estimate_type_rec) %>%
spread(long_key, estimate,fill = NA) %>%
rename(State= geodisplaylabel)
}
state_edu_alone_pct <- state_edu_long  %>%
filter(pop_id %in% aapi_alone) %>%
select(-pop_id,-estimate_type) %>%
filter(estimate_type_rec =="% BA or Higher" | estimate_type_rec =="% HS or Less") %>%
state_edu_combo_pct <- state_edu_long  %>%
filter(pop_id %in% aapi_combo )%>%
select(-pop_id,-estimate_type)%>%
filter(estimate_type_rec =="% BA or Higher" | estimate_type_rec =="% HS or Less")
state_edu_combo_pct <- state_edu_long  %>%
filter(pop_id %in% aapi_combo )%>%
select(-pop_id,-estimate_type)%>%
filter(estimate_type_rec =="% BA or Higher" | estimate_type_rec =="% HS or Less")
View(state_edu_alone_pct)
View(state_edu_alone_pct)
---
title: ''
output: html_document
---
```{r setup, include=FALSE}
## Loading Packages
library(forcats)
library(DT)
library(readxl)
library(tidyverse)
library(highcharter)
library(glue)
library(acs)
library(stringr)
## Setting Formatting for output
knitr::knit_hooks$set(inline = function(x) { if(!is.numeric(x)){ x }else{ prettyNum(round(x,2), big.mark=",", digits=6) } })
## Formatting for Graphics
hcoptslang <- getOption("highcharter.lang")
hcoptslang$thousandsSep <- ","
options(highcharter.lang = hcoptslang)
#Read in files
state_edu<- readxl::read_xlsx("raw_data/state/state_edu.xlsx")
state_edu$pop_id <- as.factor(state_edu$pop_id)
### Getting Rid of Estimates where the "CHECK" variable is flagging uncertainty
state_edu <- state_edu %>%
mutate(est_hsless =
case_when( check_hsless == 1 ~  NA_real_ ,TRUE ~ est_hsless),
est_hsged  =
case_when( check_hsged == 1 ~  NA_real_ ,TRUE ~ est_hsged),
est_somecollegeaa  =
case_when( check_somecollegeaa == 1 ~  NA_real_ ,TRUE ~ est_somecollegeaa),
est_bahigher  =
case_when( check_bahigher == 1 ~  NA_real_ ,TRUE ~ est_bahigher))
# Dropping those indicators
state_edu <- state_edu %>% select(-check_hsless,
-check_hsged,
-check_somecollegeaa,
-check_bahigher)
state_edu <- state_edu %>% mutate(
pct_hsless   = est_hsless/est_totpop,
pct_bahigher = est_bahigher/ est_totpop)
## Creating Lookup for Pop_id
aapi_alone<- c(1,12,50)
aapi_combo<- c(1,31,60)
## Converting it to LONG format
state_edu_long<- state_edu %>% select(-geoid)  %>%
gather(estimate_type,
estimate,
-geodisplaylabel,
-pop_id)
## Recoding state_edu_long$pop_id
state_edu_long$pop_id_rec <- as.character(state_edu_long$pop_id)
state_edu_long$pop_id_rec <- fct_recode(state_edu_long$pop_id_rec,
"State Pop" = "1",
"Asian" = "12",
"Asian" = "31",
"NHPI" = "50",
"NHPI" = "60")
## Recoding state_edu_long$estimate_type into state_edu_long$estimate_type_rec
state_edu_long$estimate_type_rec <- fct_recode(state_edu_long$estimate_type,
"Total Pop" = "est_totpop",
"HS or Less" = "est_hsless",
"HS Diploma" = "est_hsged",
"Some College or AA" = "est_somecollegeaa",
"BA or Higher" = "est_bahigher",
"% HS or Less"= "pct_hsless",
"% BA or Higher" = "pct_bahigher")
state_edu_alone_raw <- state_edu_long  %>%
filter(pop_id %in% aapi_alone) %>%
select(-pop_id,-estimate_type) %>%
filter(estimate_type_rec !="% BA or Higher") %>%
filter(estimate_type_rec !="% HS or Less")
state_edu_combo_raw <- state_edu_long  %>%
filter(pop_id %in% aapi_combo )%>%
select(-pop_id,-estimate_type)%>%
filter(estimate_type_rec !="% BA or Higher") %>%
filter(estimate_type_rec !="% HS or Less")
state_edu_alone_pct <- state_edu_long  %>%
filter(pop_id %in% aapi_alone) %>%
select(-pop_id,-estimate_type) %>%
filter(estimate_type_rec =="% BA or Higher" | estimate_type_rec =="% HS or Less")
state_edu_combo_pct <- state_edu_long  %>%
filter(pop_id %in% aapi_combo )%>%
select(-pop_id,-estimate_type)%>%
filter(estimate_type_rec =="% BA or Higher" | estimate_type_rec =="% HS or Less")
View(state_edu_alone_pct)
## Using the function I created above to spread the data into the right format
state_edu_table<- state_create_table(state_edu_alone_pct)
View(state_edu_table)
View(state_edu_alone)
View(state_edu_table)
## Reordering columns (WE should be able to automate this, I got an error when I tried to include it in the function, not sure what the issue is though)
state_edu_table <- state_edu_table [c(1,6,7,2,3,4,5)]
## Passing the created table to the Display Table Function Created Above
state_display_edu(state_edu_table)
state_display_edu_pct <- function(data){
data %>%
datatable(extensions =
list("Buttons" = NULL, 'FixedColumns'= T, "Scroller"=T),
rownames= FALSE,
options = list(
dom = 'rtB',
buttons = c('copy', 'csv', 'excel'),
scrollX = TRUE,
fixedColumns = list(leftColumns = 1),
columnDefs = list(list(className = 'dt-head-left')),
lengthMenu = c(25, 50, 100), pageLength = 50)) %>%
formatPercentage(columns =(2:7))
}
## Passing the created table to the Display Table Function Created Above
state_display_edu_pct(state_edu_table)
state_display_edu_pct <- function(data){
data %>%
datatable(extensions =
list("Buttons" = NULL, 'FixedColumns'= T, "Scroller"=T),
rownames= FALSE,
options = list(
dom = 'rtB',
buttons = c('copy', 'csv', 'excel'),
scrollX = TRUE,
fixedColumns = list(leftColumns = 1),
columnDefs = list(list(className = 'dt-head-left')),
lengthMenu = c(25, 50, 100), pageLength = 50)) %>%
formatPercentage(columns =(2:7),0)
}
## Using the function I created above to spread the data into the right format
state_edu_table_pct<- state_create_table(state_edu_alone_pct)
## Passing the created table to the Display Table Function Created Above
state_display_edu_pct(state_edu_table_pct)
## Reordering columns (WE should be able to automate this, I got an error when I tried to include it in the function, not sure what the issue is though)
state_edu_table_pct <- state_edu_table_pct [c(1,6,7,2,3,4,5)]
## Passing the created table to the Display Table Function Created Above
state_display_edu_pct(state_edu_table_pct)
## Loading Packages
library(forcats)
library(DT)
library(readxl)
library(tidyverse)
library(highcharter)
library(glue)
library(acs)
library(stringr)
## Setting Formatting for output
knitr::knit_hooks$set(inline = function(x) { if(!is.numeric(x)){ x }else{ prettyNum(round(x,2), big.mark=",", digits=6) } })
## Formatting for Graphics
hcoptslang <- getOption("highcharter.lang")
hcoptslang$thousandsSep <- ","
options(highcharter.lang = hcoptslang)
#Read in files
state_edu<- readxl::read_xlsx("raw_data/state/state_edu.xlsx")
state_edu$pop_id <- as.factor(state_edu$pop_id)
### Getting Rid of Estimates where the "CHECK" variable is flagging uncertainty
state_edu <- state_edu %>%
mutate(est_hsless =
case_when( check_hsless == 1 ~  NA_real_ ,TRUE ~ est_hsless),
est_hsged  =
case_when( check_hsged == 1 ~  NA_real_ ,TRUE ~ est_hsged),
est_somecollegeaa  =
case_when( check_somecollegeaa == 1 ~  NA_real_ ,TRUE ~ est_somecollegeaa),
est_bahigher  =
case_when( check_bahigher == 1 ~  NA_real_ ,TRUE ~ est_bahigher))
# Dropping those indicators
state_edu <- state_edu %>% select(-check_hsless,
-check_hsged,
-check_somecollegeaa,
-check_bahigher)
state_edu <- state_edu %>% mutate(
pct_hsless   = est_hsless/est_totpop,
pct_bahigher = est_bahigher/ est_totpop)
## Creating Lookup for Pop_id
aapi_alone<- c(1,12,50)
aapi_combo<- c(1,31,60)
## Converting it to LONG format
state_edu_long<- state_edu %>% select(-geoid)  %>%
gather(estimate_type,
estimate,
-geodisplaylabel,
-pop_id)
## Recoding state_edu_long$pop_id
state_edu_long$pop_id_rec <- as.character(state_edu_long$pop_id)
state_edu_long$pop_id_rec <- fct_recode(state_edu_long$pop_id_rec,
"State Pop" = "1",
"Asian" = "12",
"Asian" = "31",
"NHPI" = "50",
"NHPI" = "60")
## Recoding state_edu_long$estimate_type into state_edu_long$estimate_type_rec
state_edu_long$estimate_type_rec <- fct_recode(state_edu_long$estimate_type,
"Total Pop" = "est_totpop",
"HS or Less" = "est_hsless",
"HS Diploma" = "est_hsged",
"Some College or AA" = "est_somecollegeaa",
"BA or Higher" = "est_bahigher",
"% HS or Less"= "pct_hsless",
"% BA or Higher" = "pct_bahigher")
state_edu_alone_raw <- state_edu_long  %>%
filter(pop_id %in% aapi_alone) %>%
select(-pop_id,-estimate_type) %>%
filter(estimate_type_rec !="% BA or Higher") %>%
filter(estimate_type_rec !="% HS or Less")
state_edu_combo_raw <- state_edu_long  %>%
filter(pop_id %in% aapi_combo )%>%
select(-pop_id,-estimate_type)%>%
filter(estimate_type_rec !="% BA or Higher") %>%
filter(estimate_type_rec !="% HS or Less")
state_edu_alone_pct <- state_edu_long  %>%
filter(pop_id %in% aapi_alone) %>%
select(-pop_id,-estimate_type) %>%
filter(estimate_type_rec =="% BA or Higher" | estimate_type_rec =="% HS or Less")
state_edu_combo_pct <- state_edu_long  %>%
filter(pop_id %in% aapi_combo )%>%
select(-pop_id,-estimate_type)%>%
filter(estimate_type_rec =="% BA or Higher" | estimate_type_rec =="% HS or Less")
# Table for Just raw counts
state_create_table <- function(data){
data %>%
mutate(long_key=paste(pop_id_rec, estimate_type_rec, sep=": ")) %>% #Combining Pop_ID and Estimate type
select(-pop_id_rec, -estimate_type_rec) %>%
spread(long_key, estimate,fill = NA) %>%
rename(State= geodisplaylabel)
}
state_display_edu_raw <- function(data){
data %>%
datatable(extensions =
list("Buttons" = NULL, 'FixedColumns'= T, "Scroller"=T),
rownames= FALSE,
options = list(
dom = 'rtB',
buttons = c('copy', 'csv', 'excel'),
scrollX = TRUE,
fixedColumns = list(leftColumns = 1),
columnDefs = list(list(className = 'dt-head-left')),
lengthMenu = c(25, 50, 100), pageLength = 50)) %>%
formatCurrency(columns = c(2:16),currency = "", interval = 3, mark = ",", digits=0)
}
state_display_edu_pct <- function(data){
data %>%
datatable(extensions =
list("Buttons" = NULL, 'FixedColumns'= T, "Scroller"=T),
rownames= FALSE,
options = list(
dom = 'rtB',
buttons = c('copy', 'csv', 'excel'),
scrollX = TRUE,
fixedColumns = list(leftColumns = 1),
columnDefs = list(list(className = 'dt-head-left')),
lengthMenu = c(25, 50, 100), pageLength = 50)) %>%
formatPercentage(columns =(2:7),0)
}
## Using the function I created above to spread the data into the right format
state_edu_table<- state_create_table(state_edu_alone)
## Reordering columns (WE should be able to automate this, I got an error when I tried to include it in the function, not sure what the issue is though)
state_edu_table <- state_edu_table [c(1,16,15,14,13,12,2,3,4,5,7,8,9,10,11)]
## Passing the created table to the Display Table Function Created Above
state_display_edu(state_edu_table)
state_create_table(state_edu_alone)
## Using the function I created above to spread the data into the right format
state_edu_table_alone <- state_create_table(state_edu_alone)
## Reordering columns (WE should be able to automate this, I got an error when I tried to include it in the function, not sure what the issue is though)
state_edu_table_alone <- state_edu_table_alone [c(1,16,15,14,13,12,2,3,4,5,7,8,9,10,11)]
## Passing the created table to the Display Table Function Created Above
state_display_edu(state_edu_table_alone)
rmarkdown::render(state_v2.Rmd)
rmarkdown::render(state_v2.Rmd)
rmarkdown::render("state_v2.Rmd")
## Using the function I created above to spread the data into the right format
state_edu_table_alone <- state_create_table(state_edu_alone)
getwd()
unlink('state_v2_cache', recursive = TRUE)
use warnings(index.html)
warnings(index.html)
