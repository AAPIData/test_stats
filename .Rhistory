direction = "auto"))
aa_statepop %>%
st_transform(crs = "+init=epsg:4326") %>%
leaflet(width = "100%") %>%
addProviderTiles(provider = "CartoDB.Positron") %>%
addPolygons(popup = ~ str_extract(NAME, "^([^,]*)"),
stroke = FALSE,
smoothFactor = 0,
fillOpacity = 0.7,
color = ~ pal(estimate)) %>%
addLegend("bottomright",
pal = pal,
values = ~ estimate,
title = "Median Home Value",
labFormat = labelFormat(prefix = "$"),
opacity = 1)
pal <- colorNumeric(palette = "viridis",
domain = aa_statepop$estimate)
aa_statepop %>%
st_transform(crs = "+init=epsg:4326") %>%
leaflet(width = "100%") %>%
addProviderTiles(provider = "CartoDB.Positron") %>%
addPolygons(popup = ~ str_extract(NAME, "^([^,]*)"),
stroke = FALSE,
smoothFactor = 0,
fillOpacity = 0.7,
color = ~ pal(estimate)) %>%
addLegend("bottomright",
pal = pal,
values = ~ estimate,
title = "Median Home Value",
labFormat = labelFormat(prefix = "$"),
opacity = 1)
aa_statepop %>%
st_transform(crs = "+init=epsg:4326") %>%
leaflet(width = "100%") %>%
addProviderTiles(provider = "CartoDB.Positron") %>%
addPolygons(popup = ~ str_extract(NAME, "^([^,]*)"),
stroke = FALSE,
smoothFactor = 0,
fillOpacity = 0.7,
color = ~ pal(estimate),
label = aa_statepop$NAME,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
label = aa_statepop$NAME,
aa_statepop %>%
st_transform(crs = "+init=epsg:4326") %>%
leaflet(width = "100%") %>%
addProviderTiles(provider = "CartoDB.Positron") %>%
addPolygons(popup = ~ str_extract(NAME, "^([^,]*)"),
stroke = FALSE,
smoothFactor = 0,
fillOpacity = 0.4,
color = ~ pal(pct),
label = aa_statepop$NAME,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend("bottomright",
pal = pal,
values = ~ pct,
title = "Asian Alone",
opacity = 1,
labFormat = labelFormat(suffix = "%"))
aa_statepop %>% filter(NAME !%in% c("Hawaii", "Alaska")) %>%
aa_statepop %>% filter(!NAME %in% c("Hawaii", "Alaska")) %>%
st_transform(crs = "+init=epsg:4326") %>%
leaflet(width = "100%") %>%
addProviderTiles(provider = "CartoDB.Positron") %>%
addPolygons(popup = ~ str_extract(NAME, "^([^,]*)"),
stroke = FALSE,
smoothFactor = 0,
fillOpacity = 0.4,
color = ~ pal(estimate),
label = aa_statepop$NAME,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend("bottomright",
pal = pal,
values = ~ estimate,
title = "Asian Alone",
opacity = 1,
labFormat = labelFormat(suffix = "%"))
devtools::install_github("tidyverse/glue")
library(glue)
library(forcats)
library(DT)
library(readxl)
library(tidyverse)
head(mtcars) %>% glue_data("{rownames(.)} has {hp} hp")
state_edu<- readxl::read_xlsx("~/Documents/quickstatsdatabase/state_edu.xlsx")
state_edu$pop_id<- as.factor(state_edu$pop_id)
state_edu_long<- state_edu %>% select(st_name, pop_id,total:pct_hshigher) %>%
gather( estimate_type, value, -st_name ,-pop_id)
head(state_edu)
state_edu %>% distinct(st_name)
head(state_edu) %>% glue_data("This data has information for {st_name}")
head(state_edu) %>% glue_data("{st_name(.)} has {hp} hp")
st_name
head(state_edu) %>% glue_data("{rownames(.)} has ")
head(state_edu) %>% glue_data("{st_name} has ")
state_edu %>% distinct(st_name) %>% glue_data("We have data for {st_name}.")
setwd("~/quick_stats")
library(DT)
library(readxl)
library(tidyverse)
library(highcharter)
topic_selected <- params$topic
st_dta <- read_excel("state_dta.xlsx",sheet = topic_selected)
View(state_edu)
knit_with_parameters('~/quick_stats/report_template.Rmd')
knitr::opts_chunk$set(echo = TRUE)
library(forcats)
library(DT)
library(readxl)
library(tidyverse)
library(highcharter)
library(glue)
state_edu<- readxl::read_xlsx("~/Documents/quickstatsdatabase/state_edu.xlsx")
state_edu<- readxl::read_xlsx("~/Documents/quickstatsdatabase/state_edu2.xlsx")
View(state_edu)
state_edu<- readxl::read_xlsx("~/Documents/quickstatsdatabase/state_edu2.xlsx")
View(state_edu)
state_edu<- readxl::read_xlsx("~/Documents/quickstatsdatabase/state_edu.xlsx")
View(state_edu)
state_edu %>% select(st_name, pop_id,total:pct_hshigher) %>%
gather( estimate_type, value, -st_name ,-pop_id)
View(state_edu)
View(state_edu)
state_edu_long
state_edu<- readxl::read_xlsx("~/Documents/quickstatsdatabase/state_edu.xlsx")
state_edu$pop_id<- as.factor(state_edu$pop_id)
state_edu_long<- state_edu %>% select(st_name, pop_id,total:pct_hshigher) %>%
gather( estimate_type, estimate, -st_name ,-pop_id)
state_edu_long<- state_edu %>% select(st_name, pop_group,Total:pct_hshigher) %>%
gather( estimate_type, estimate, -st_name ,-pop_group)
state_edu_long
state_edu_long %>%
mutate(long_key=paste(pop_group, estimate_type, sep=" ")) %>%
select(-pop_id, -estimate_type)%>%
spread(long_key, value)
state_edu_long %>%
mutate(long_key=paste(pop_group, estimate_type, sep=" ")) %>%
select(-pop_group, -estimate_type)%>%
spread(long_key, value)
state_edu_long %>%
mutate(long_key=paste(pop_group, estimate_type, sep=" ")) %>%
select(-pop_group, -estimate_type)%>%
spread(long_key, estimate)
state_edu_long %>%
mutate(long_key=paste(pop_group, estimate_type, sep=" "))
state_edu_long %>%
mutate(long_key=paste(pop_group, estimate_type, sep=":")) %>%
select(-pop_group, -estimate_type)
state_edu<- readxl::read_xlsx("~/Documents/quickstatsdatabase/state_edu.xlsx")
state_edu$pop_id<- as.factor(state_edu$pop_id)
head(state_edu)
state_edu_long
datatable(state_edu_long)
View(state_edu_long)
state_edu_long %>% spread(estimate_type, estimate)
state_edu_long<- state_edu %>% select(st_name, pop_id,Total:pct_hshigher) %>%
gather( estimate_type, estimate, -st_name ,-pop_id)
View(state_edu_long)
state_edu_alone <- state_edu_long  %>% filter(pop_id %in% majorgroups_alone ) %>%
state_edu_alone <- state_edu_long  %>% filter(pop_id %in% majorgroups_alone )
# 1 = Total Population, 12 = Asian Alone, 50 = NHPI Alone
majorgroups_alone<- c(1,12,50)
# 1 = Total Population, 12 = Asian Alone/Combo, 50 = NHPI Alone/Combo
majorgroups_alone_combo<- c(31,60,1)
state_edu_alone <- state_edu_long  %>% filter(pop_id %in% majorgroups_alone )
View(state_edu_alone)
state_edu_alone$pop_id <- fct_recode(state_edu_alone$pop_id,
"Total Population" = "1",
"Asian Alone" = "12",
"NHPI Alone" = "50")
datatable(state_edu_alone)
state_edu_alone %>%
mutate(long_key=paste(pop_id, estimate_type, sep=":")) %>%
select(-pop_group, -estimate_type) %>%
spread(long_key, estimate)
state_edu_alone %>%
mutate(long_key=paste(pop_id, estimate_type, sep=":")) %>%
select(-pop_id, -estimate_type) %>%
spread(long_key, estimate)
state_edu_alone
state_edu_alone %>%
mutate(long_key=paste(pop_id, estimate_type, sep=":")) %>%
select(-pop_id, -estimate_type) %>%
spread(long_key, estimate)%>%
datatable(datatable(extensions =
list("Buttons" = NULL, 'FixedColumns'= T, "Scroller"=T),
rownames= FALSE,
options = list(
dom = 'Brtip',
buttons = c('copy', 'csv', 'excel'),
scrollX = TRUE,
lengthMenu = c(25, 50, 100), pageLength = 50,
deferRender = TRUE,
scrollY = 400,
scroller = TRUE)) %>%
formatPercentage(columns = 1:4,1))
state_edu_alone %>%
mutate(long_key=paste(pop_id, estimate_type, sep=":")) %>%
select(-pop_id, -estimate_type) %>%
spread(long_key, estimate) %>%
datatable(extensions =
list("Buttons" = NULL, 'FixedColumns'= T, "Scroller"=T),
rownames= FALSE,
options = list(
dom = 'Brtip',
buttons = c('copy', 'csv', 'excel'),
scrollX = TRUE,
lengthMenu = c(25, 50, 100), pageLength = 50,
deferRender = TRUE,
scrollY = 400,
scroller = TRUE)) %>%
formatPercentage(columns = 1:4,1)
test <-state_edu_alone %>%
mutate(long_key=paste(pop_id, estimate_type, sep=": ")) %>%
select(-pop_id, -estimate_type) %>%
spread(long_key, estimate)
View(test)
state_edu_alone %>%
mutate(long_key=paste(pop_id, estimate_type, sep=": ")) %>%
select(-pop_id, -estimate_type) %>%
spread(long_key, estimate) %>%
datatable(extensions =
list("Buttons" = NULL, 'FixedColumns'= T, "Scroller"=T),
rownames= FALSE,
options = list(
dom = 'Brtip',
buttons = c('copy', 'csv', 'excel'),
scrollX = TRUE,
lengthMenu = c(25, 50, 100), pageLength = 50,
deferRender = TRUE,
scrollY = 400,
scroller = TRUE)) %>%
formatPercentage(columns = c(2,6,10) %>%
formatCurrency(columns = c(2:4,7:9:10:13),currency = "", interval = 3, mark = ",", digits=0)
state_edu_alone %>%
state_edu_alone %>%
mutate(long_key=paste(pop_id, estimate_type, sep=": ")) %>%
select(-pop_id, -estimate_type) %>%
spread(long_key, estimate) %>%
datatable(extensions =
list("Buttons" = NULL, 'FixedColumns'= T, "Scroller"=T),
rownames= FALSE,
options = list(
dom = 'Brtip',
buttons = c('copy', 'csv', 'excel'),
scrollX = TRUE,
lengthMenu = c(25, 50, 100), pageLength = 50,
deferRender = TRUE,
scrollY = 400,
scroller = TRUE)) %>%
formatPercentage(columns = c(2,6,10)) %>%
formatCurrency(columns = c(2,3,4,7,8,9,11,12,13),currency = "", interval = 3, mark = ",", digits=0)
state_edu_alone
questionr:::irec()
## Recoding state_edu_alone$estimate_type
state_edu_alone$estimate_type <- fct_recode(state_edu_alone$estimate_type,
"Total HS or GED" = "total_hsged",
"Total BA or Higher" = "total_bahigher",
"Percent HS or Higher" = "pct_hshigher")
state_edu_alone %>%
mutate(long_key=paste(pop_id, estimate_type, sep=": ")) %>%
select(-pop_id, -estimate_type) %>%
spread(long_key, estimate) %>%
datatable(extensions =
list("Buttons" = NULL, 'FixedColumns'= T, "Scroller"=T),
rownames= FALSE,
options = list(
dom = 'Brtip',
buttons = c('copy', 'csv', 'excel'),
scrollX = TRUE,
lengthMenu = c(25, 50, 100), pageLength = 50,
deferRender = TRUE,
scrollY = 400,
scroller = TRUE)) %>%
formatPercentage(columns = c(2,6,10)) %>%
formatCurrency(columns = c(2,3,4,7,8,9,11,12,13),currency = "", interval = 3, mark = ",", digits=0)
## Recoding state_edu_alone$estimate_type
state_edu_alone$estimate_type <- fct_recode(state_edu_alone$estimate_type,
"HS or GED" = "total_hsged",
"BA or Higher" = "total_bahigher",
"HS or Higher" = "pct_hshigher")
state_edu<- readxl::read_xlsx("~/Documents/quickstatsdatabase/state_edu.xlsx")
state_edu$pop_id<- as.factor(state_edu$pop_id)
state_edu_long<- state_edu %>% select(st_name, pop_id,Total:pct_hshigher) %>%
gather( estimate_type, estimate, -st_name ,-pop_id)
datatable(state_edu_long)
# 1 = Total Population, 12 = Asian Alone, 50 = NHPI Alone
majorgroups_alone<- c(1,12,50)
# 1 = Total Population, 12 = Asian Alone/Combo, 50 = NHPI Alone/Combo
majorgroups_alone_combo<- c(31,60,1)
state_edu_alone <- state_edu_long  %>% filter(pop_id %in% majorgroups_alone )
state_edu_alone$pop_id <- fct_recode(state_edu_alone$pop_id,
"Total Population" = "1",
"Asian Alone" = "12",
"NHPI Alone" = "50")
## Recoding state_edu_alone$estimate_type
state_edu_alone$estimate_type <- fct_recode(state_edu_alone$estimate_type,
"HS or GED" = "total_hsged",
"BA or Higher" = "total_bahigher",
"HS or Higher" = "pct_hshigher")
datatable(state_edu_alone)
state_edu_alone %>%
mutate(long_key=paste(pop_id, estimate_type, sep=": ")) %>%
select(-pop_id, -estimate_type) %>%
spread(long_key, estimate) %>%
datatable(extensions =
list("Buttons" = NULL, 'FixedColumns'= T, "Scroller"=T),
rownames= FALSE,
options = list(
dom = 'Brtip',
buttons = c('copy', 'csv', 'excel'),
scrollX = TRUE,
lengthMenu = c(25, 50, 100), pageLength = 50,
deferRender = TRUE,
scrollY = 400,
scroller = TRUE)) %>%
formatPercentage(columns = c(2,6,10)) %>%
formatCurrency(columns = c(2,3,4,7,8,9,11,12,13),currency = "", interval = 3, mark = ",", digits=0)
state_edu<- readxl::read_xlsx("~/Documents/quickstatsdatabase/state_edu.xlsx")
state_edu$pop_id<- as.factor(state_edu$pop_id)
state_edu_long<- state_edu %>% select(st_name, pop_id,Total:pct_hshigher) %>%
gather( estimate_type, estimate, -st_name ,-pop_id)
state_edu_long
# 1 = Total Population, 12 = Asian Alone, 50 = NHPI Alone
majorgroups_alone<- c(1,12,50)
# 1 = Total Population, 12 = Asian Alone/Combo, 50 = NHPI Alone/Combo
majorgroups_alone_combo<- c(31,60,1)
state_edu_alone <- state_edu_long  %>% filter(pop_id %in% majorgroups_alone )
View(state_edu_alone)
## Recoding state_edu_alone$estimate_type
state_edu_alone$estimate_type <- fct_recode(state_edu_alone$estimate_type,
"HS or GED" = "total_hsged",
"BA or Higher" = "total_bahigher",
"HS or Higher" = "pct_hshigher")
state_edu_alone$pop_id <- fct_recode(state_edu_alone$pop_id,
"Total Population" = "1",
"Asian Alone" = "12",
"NHPI Alone" = "50")
View(state_edu_alone)
state_edu_alone %>%
mutate(long_key=paste(pop_id, estimate_type, sep=": "))
state_edu_alone %>%
mutate(long_key=paste(pop_id, estimate_type, sep=": ")) %>%
select(-pop_id, -estimate_type)
state_edu_alone %>%
mutate(long_key=paste(pop_id, estimate_type, sep=": ")) %>%
select(-pop_id, -estimate_type)
state_edu_alone %>%
mutate(long_key=paste(pop_id, estimate_type, sep=": ")) %>%
select(-pop_id, -estimate_type) %>%
spread(long_key, estimate)
state_edu_alone %>%
mutate(long_key=paste(pop_id, estimate_type, sep=": ")) %>%
select(-pop_id, -estimate_type) %>%
spread(long_key, estimate)
state_edu_alone %>%
mutate(long_key=paste(pop_id, estimate_type, sep=": ")) %>%
select(-pop_id, -estimate_type) %>%
spread(long_key, estimate) %>%
datatable(extensions =
list("Buttons" = NULL, 'FixedColumns'= T, "Scroller"=T),
rownames= FALSE,
options = list(
dom = 'Brtip',
buttons = c('copy', 'csv', 'excel'),
scrollX = TRUE,
lengthMenu = c(25, 50, 100), pageLength = 50,
deferRender = TRUE,
scrollY = 400,
scroller = TRUE)) %>%
formatPercentage(columns = c(2,6,10)) %>%
formatCurrency(columns = c(2,3,4,7,8,9,11,12,13),currency = "", interval = 3, mark = ",", digits=0)
test2< state_edu_alone %>%
mutate(long_key=paste(pop_id, estimate_type, sep=": ")) %>%
select(-pop_id, -estimate_type) %>%
spread(long_key, estimate) %>%
datatable(extensions =
list("Buttons" = NULL, 'FixedColumns'= T, "Scroller"=T),
rownames= FALSE,
options = list(
dom = 'Brtip',
buttons = c('copy', 'csv', 'excel'),
scrollX = TRUE,
lengthMenu = c(25, 50, 100), pageLength = 50,
deferRender = TRUE,
scrollY = 400,
scroller = TRUE)) %>%
formatPercentage(columns = c(2,6,10)) %>%
formatCurrency(columns = c(2,3,4,7,8,9,11,12,13),currency = "", interval = 3, mark = ",", digits=0)
test2 <- state_edu_alone %>%
mutate(long_key=paste(pop_id, estimate_type, sep=": ")) %>%
select(-pop_id, -estimate_type) %>%
spread(long_key, estimate)
View(test2)
test2 <- state_edu_alone %>%
mutate(long_key=paste(pop_id, estimate_type, sep=": ")) %>%
select(-pop_id, -estimate_type) %>%
spread(long_key, estimate) %>%
datatable(extensions =
list("Buttons" = NULL, 'FixedColumns'= T, "Scroller"=T),
rownames= FALSE,
options = list(
dom = 'Brtip',
buttons = c('copy', 'csv', 'excel'),
scrollX = TRUE,
lengthMenu = c(25, 50, 100), pageLength = 50,
deferRender = TRUE,
scrollY = 400,
scroller = TRUE)) %>%
formatCurrency(columns = c(colnames()),currency = "", interval = 3, mark = ",", digits=0)
test2 <- state_edu_alone %>%
mutate(long_key=paste(pop_id, estimate_type, sep=": ")) %>%
select(-pop_id, -estimate_type) %>%
spread(long_key, estimate) %>%
datatable(extensions =
list("Buttons" = NULL, 'FixedColumns'= T, "Scroller"=T),
rownames= FALSE,
options = list(
dom = 'Brtip',
buttons = c('copy', 'csv', 'excel'),
scrollX = TRUE,
lengthMenu = c(25, 50, 100), pageLength = 50,
deferRender = TRUE,
scrollY = 400,
scroller = TRUE)) %>%
formatCurrency(columns = c(colnames(.)),currency = "", interval = 3, mark = ",", digits=0)
View(test2)
state_edu_alone %>%
mutate(long_key=paste(pop_id, estimate_type, sep=": ")) %>%
select(-pop_id, -estimate_type) %>%
spread(long_key, estimate) %>%
datatable(extensions =
list("Buttons" = NULL, 'FixedColumns'= T, "Scroller"=T),
rownames= FALSE,
options = list(
dom = 'Brtip',
buttons = c('copy', 'csv', 'excel'),
scrollX = TRUE,
lengthMenu = c(25, 50, 100), pageLength = 50,
deferRender = TRUE,
scrollY = 400,
scroller = TRUE)) %>%
formatCurrency(columns = c(colnames(.)),currency = "", interval = 3, mark = ",", digits=0)
test2 <- state_edu_alone %>%
mutate(long_key=paste(pop_id, estimate_type, sep=": ")) %>%
select(-pop_id, -estimate_type) %>%
spread(long_key, estimate)
View(test2)
state_edu_alone %>%
mutate(long_key=paste(pop_id, estimate_type, sep=": ")) %>%
select(-pop_id, -estimate_type) %>%
spread(long_key, estimate) %>%
datatable(extensions =
list("Buttons" = NULL, 'FixedColumns'= T, "Scroller"=T),
rownames= FALSE,
options = list(
dom = 'Brtip',
buttons = c('copy', 'csv', 'excel'),
scrollX = TRUE,
lengthMenu = c(25, 50, 100), pageLength = 50,
deferRender = TRUE,
scrollY = 400,
scroller = TRUE)) %>%
formatCurrency(columns = c(2,3,5,6,7,9,10,11,13),currency = "", interval = 3, mark = ",", digits=0) %>%
formatPercentage(columns = c(4,8,12),digits = 1)
state_edu_alone %>%
mutate(long_key=paste(pop_id, estimate_type, sep=": ")) %>%
select(-pop_id, -estimate_type) %>%
spread(long_key, estimate,fill = "missing") %>%
datatable(extensions =
list("Buttons" = NULL, 'FixedColumns'= T, "Scroller"=T),
rownames= FALSE,
options = list(
dom = 'Brtip',
buttons = c('copy', 'csv', 'excel'),
scrollX = TRUE,
lengthMenu = c(25, 50, 100), pageLength = 50,
deferRender = TRUE,
scrollY = 400,
scroller = TRUE)) %>%
formatCurrency(columns = c(2,3,5,6,7,9,10,11,13),currency = "", interval = 3, mark = ",", digits=0) %>%
formatPercentage(columns = c(4,8,12),digits = 1)
state_edu_alone %>%
mutate(long_key=paste(pop_id, estimate_type, sep=": ")) %>% #Combining Pop_ID and Estimate type
select(-pop_id, -estimate_type) %>%
spread(long_key, estimate,fill = "No Data") %>%
rename(State= st_name) %>%
datatable(extensions =
list("Buttons" = NULL, 'FixedColumns'= T, "Scroller"=T),
rownames= FALSE,
options = list(
dom = 'Brtip',
buttons = c('copy', 'csv', 'excel'),
scrollX = TRUE,
lengthMenu = c(25, 50, 100), pageLength = 50,
deferRender = TRUE,
scrollY = 400,
scroller = TRUE)) %>%
formatCurrency(columns = c(2,3,5,6,7,9,10,11,13),currency = "", interval = 3, mark = ",", digits=0) %>%
formatPercentage(columns = c(4,8,12),digits = 1)
