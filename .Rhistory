hc_subtitle(text = "Source: 2011-2015 ACS using Asian/NHPI Alone", align = "center") %>%
hc_chart(backgroundColor = "#ffffff") %>%
hc_add_series_map(usgeojson, state_edu_table, name = "Education",value = "value", joinBy = c("postalcode", "STUSAB"))
highchart() %>%
hc_chart(type = "tilemap") %>%
hc_title(text = "Bachelors Degree or Higher", align = "center") %>%
hc_subtitle(text = "Source: 2011-2015 ACS using Asian/NHPI Alone", align = "center") %>%
# hc_chart(backgroundColor = "#ffffff") %>%
hc_add_series_map(usgeojson, state_edu_table, name = "Education",value = "value", joinBy = c("postalcode", "STUSAB"))
highchart() %>%
hc_chart(type = "tilemap") %>%
hc_title(text = "Bachelors Degree or Higher", align = "center") %>%
hc_subtitle(text = "Source: 2011-2015 ACS using Asian/NHPI Alone", align = "center") %>%
# hc_chart(backgroundColor = "#ffffff") %>%
hc_add_series(state_edu_table, name = "Education",value = "value")
View(state_edu_table)
View(state_edu_table_combo)
View(state_edu_table)
highchart() %>%
hc_chart(type = "tilemap") %>%
hc_title(text = "Bachelors Degree or Higher", align = "center") %>%
hc_subtitle(text = "Source: 2011-2015 ACS using Asian/NHPI Alone", align = "center") %>%
# hc_chart(backgroundColor = "#ffffff") %>%
hc_add_series(state_edu_table, name = "Education",value = "value", dataLabels = list(enabled = TRUE, format = '{point.STUSAB}')) %>%
hc_tooltip(pointFormat = tooltip_table(x,y,title), useHTML=T,  headerFormat= "")%>%
hc_add_theme(hc_theme_538()) %>%
hc_colorAxis(stops = color_stops(),labels= list(format = "{value}%"),showInLegend=T) %>%
hc_legend(title = list(text= "Statewide Percentage", fontStyle ='italic'),align = "center",verticalAlign = "bottom",
layout = "horizontal", padding = 5)
highchart() %>%
hc_chart(type = "tilemap") %>%
hc_title(text = "Bachelors Degree or Higher", align = "center") %>%
hc_subtitle(text = "Source: 2011-2015 ACS using Asian/NHPI Alone", align = "center") %>%
# hc_chart(backgroundColor = "#ffffff") %>%
hc_add_series(state_edu_table, name = "Education",value = "value", dataLabels = list(enabled = TRUE, format = '{point.STUSAB}'))
highchart() %>%
hc_chart(type = "tilemap") %>%
hc_title(text = "Bachelors Degree or Higher", align = "center") %>%
hc_subtitle(text = "Source: 2011-2015 ACS using Asian/NHPI Alone", align = "center")
highchart() %>%
hc_chart(type = "tilemap") %>%
hc_title(text = "Bachelors Degree or Higher", align = "center") %>%
hc_subtitle(text = "Source: 2011-2015 ACS using Asian/NHPI Alone", align = "center") %>%
# hc_chart(backgroundColor = "#ffffff") %>%
hc_add_series(state_edu_table, dataLabels = list(enabled = TRUE, format = '{point.STUSAB}')) %>%
hc_tooltip(pointFormat = tooltip_table(x,y,title), useHTML=T,  headerFormat= "")%>%
hc_add_theme(hc_theme_538()) %>%
hc_colorAxis(stops = color_stops(),labels= list(format = "{value}%"),showInLegend=T) %>%
hc_legend(title = list(text= "Statewide Percentage", fontStyle ='italic'),align = "center",verticalAlign = "bottom",
layout = "horizontal", padding = 5)
highchart() %>%
hc_chart(type = "tilemap") %>%
hc_title(text = "Bachelors Degree or Higher", align = "center") %>%
hc_subtitle(text = "Source: 2011-2015 ACS using Asian/NHPI Alone", align = "center") %>%
# hc_chart(backgroundColor = "#ffffff") %>%
hc_add_series(state_edu_table, dataLabels = list(enabled = TRUE, format = '{point.STUSAB}'))
#testing<- "Percent BA or Higher \n <table style='font-family:'Avenir Next'; font-size:2vmin'>\n  <tr>\n  <th>{point.name}:</th>\n    <td> {point.value:.1f}%</td>\n  </tr>\n  <tr>\n    <th>Asian Alone:</th>\n    <td> #{point.value2:.1f}%</td>\n  </tr>\n  <tr>\n    <th>NHPI Alone:</th>\n    <td> {point.value3:.1f}%</td>\n  </tr>\n</table>"
highchart() %>%
hc_chart(type = "tilemap") %>%
hc_title(text = "Bachelors Degree or Higher", align = "center") %>%
hc_subtitle(text = "Source: 2011-2015 ACS using Asian/NHPI Alone", align = "center") %>%
# hc_chart(backgroundColor = "#ffffff") %>%
hc_add_series_map(usgeojson, state_edu_table, name = "Education",value = "value", joinBy = c("postalcode", "STUSAB")) %>%
hc_tooltip(pointFormat = tooltip_table(x,y,title), useHTML=T,  headerFormat= "")%>%
hc_add_theme(hc_theme_538()) %>%
hc_colorAxis(stops = color_stops(),labels= list(format = "{value}%"),showInLegend=T) %>%
hc_legend(title = list(text= "Statewide Percentage", fontStyle ='italic'),align = "center",verticalAlign = "bottom",
layout = "horizontal", padding = 5)
#testing<- "Percent BA or Higher \n <table style='font-family:'Avenir Next'; font-size:2vmin'>\n  <tr>\n  <th>{point.name}:</th>\n    <td> {point.value:.1f}%</td>\n  </tr>\n  <tr>\n    <th>Asian Alone:</th>\n    <td> #{point.value2:.1f}%</td>\n  </tr>\n  <tr>\n    <th>NHPI Alone:</th>\n    <td> {point.value3:.1f}%</td>\n  </tr>\n</table>"
highchart() %>%
hc_title(text = "Bachelors Degree or Higher", align = "center") %>%
hc_subtitle(text = "Source: 2011-2015 ACS using Asian/NHPI Alone", align = "center") %>%
# hc_chart(backgroundColor = "#ffffff") %>%
hc_add_series_map(usgeojson, state_edu_table, name = "Education",value = "value", joinBy = c("postalcode", "STUSAB")) %>%
hc_tooltip(pointFormat = tooltip_table(x,y,title), useHTML=T,  headerFormat= "")%>%
hc_add_theme(hc_theme_538()) %>%
hc_colorAxis(stops = color_stops(),labels= list(format = "{value}%"),showInLegend=T) %>%
hc_legend(title = list(text= "Statewide Percentage", fontStyle ='italic'),align = "center",verticalAlign = "bottom",
layout = "horizontal", padding = 5)
#testing<- "Percent BA or Higher \n <table style='font-family:'Avenir Next'; font-size:2vmin'>\n  <tr>\n  <th>{point.name}:</th>\n    <td> {point.value:.1f}%</td>\n  </tr>\n  <tr>\n    <th>Asian Alone:</th>\n    <td> #{point.value2:.1f}%</td>\n  </tr>\n  <tr>\n    <th>NHPI Alone:</th>\n    <td> {point.value3:.1f}%</td>\n  </tr>\n</table>"
highchart() %>%
hc_title(text = "Bachelors Degree or Higher", align = "center") %>%
hc_subtitle(text = "Source: 2011-2015 ACS using Asian/NHPI Alone", align = "center") %>%
# hc_chart(backgroundColor = "#ffffff") %>%
hc_add_series_map(usgeojson, state_edu_table, name = "Education",value = "value", joinBy = c("postalcode", "STUSAB")) %>%
hc_tooltip(pointFormat = tooltip_table(x,y,title), useHTML=T,  headerFormat= "")%>%
hc_add_theme(hc_theme_538()) %>%
hc_colorAxis(stops = color_stops(),labels= list(format = "{value}%"),showInLegend=T) %>%
hc_legend(title = list(text= "Statewide Percentage", fontStyle ='italic'),align = "center",verticalAlign = "bottom",
layout = "horizontal", padding = 5)
#testing<- "Percent BA or Higher \n <table style='font-family:'Avenir Next'; font-size:2vmin'>\n  <tr>\n  <th>{point.name}:</th>\n    <td> {point.value:.1f}%</td>\n  </tr>\n  <tr>\n    <th>Asian Alone:</th>\n    <td> #{point.value2:.1f}%</td>\n  </tr>\n  <tr>\n    <th>NHPI Alone:</th>\n    <td> {point.value3:.1f}%</td>\n  </tr>\n</table>"
highchart() %>%
hc_title(text = "Bachelors Degree or Higher", align = "center") %>%
hc_subtitle(text = "Source: 2011-2015 ACS using Asian/NHPI Alone", align = "center") %>%
hc_chart(backgroundColor = "#ffffff") %>%
hc_add_series_map(usgeojson, state_edu_table, name = "Education",value = "value", joinBy = c("postalcode", "STUSAB"),
borderColor= "null",
borderWidth= 0) %>%
hc_tooltip(pointFormat = tooltip_table(x,y,title), useHTML=T,  headerFormat= "")%>%
hc_add_theme(hc_theme_538()) %>%
hc_colorAxis(stops = color_stops(),labels= list(format = "{value}%"),showInLegend=T) %>%
hc_legend(title = list(text= "Statewide Percentage", fontStyle ='italic'),align = "center",verticalAlign = "bottom",
layout = "horizontal", padding = 5)
setwd("~/quick_stats/")
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
setwd("~/quick_stats/")
#render your sweet site.
rmarkdown::render_site()
setwd("~/quick_stats/")
#render your sweet site.
rmarkdown::render_site()
setwd("~/quick_stats/")
#render your sweet site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("~/quick_stats/")
#render your sweet site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("~/quick_stats/")
#render your sweet site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("~/quick_stats/")
#render your sweet site.
rmarkdown::render_site()
# setwd("~/quick_stats/")
# topics = c("Poverty","Nativity","Education","Insurance")
#
# for(topic in topics)
#   rmarkdown::render(input = "report_template.Rmd",
#                     output_file = paste0("state/",topic,".html"),
#                     params = list(topic = topic)
#   )
#
#
# national_topics = c("Poverty","Nativity","Education","Insurance")
#
# for(topic in topics)
#   rmarkdown::render(input = "national_report_template.Rmd",
#                     output_file = paste0("national/",national_topics,".html"),
#                     params = list(national_topics = national_topics)
#   )
#
#
#
#
#
---
title: ""
author: ""
output:
html_document:
toc: true
toc_float: true
---
```{r setup, include=FALSE}
library(forcats)
library(DT)
library(readxl)
library(tidyverse)
library(highcharter)
library(glue)
knitr::knit_hooks$set(inline = function(x) { if(!is.numeric(x)){ x }else{ prettyNum(round(x,2), big.mark=",", digits=6) } })
hcoptslang <- getOption("highcharter.lang")
hcoptslang$thousandsSep <- ","
options(highcharter.lang = hcoptslang)
national_cvap<- readxl::read_xlsx("national_dta.xlsx", sheet = "CVAP")
national_edu<- readxl::read_xlsx("national_dta.xlsx", sheet = "Education")
national_edu<- national_edu %>% rename(`HS/GED` = total_hsged,
`HS or Higher` = total_hs_higher,
`Bachelor's` = total_ba,
`BA or Higher` = total_ba_higher)
```
<div class="jumbotron">
<h1>National Data</h1>
<p>Use the buttons to select the topic and then the tabs for population groups</p>
</div>
# Citizen Voting Age Population {.tabset .tabset-fade .tabset-pills}
## Major Racial Groups
```{r echo=FALSE, message=FALSE, warning=FALSE}
national_cvap %>%
filter(group_ID ==  "Major Racial Groups") %>%
arrange(desc(CVAP)) %>%
rename(Total = total_pop)%>%
select(Group, CVAP,Total )%>%
datatable(extensions =
list("Buttons" = NULL, 'FixedColumns'= T, "Scroller"=T),
rownames= FALSE,
options = list(
dom = 'Brt',
buttons = c('copy', 'csv', 'excel'),
scrollX = TRUE,
lengthMenu = c(25, 50, 100), pageLength = 50)) %>% formatCurrency(columns = c(2,3),currency = "", interval = 3, mark = ",", digits=0)
```
## Asian Detailed Origin
```{r echo=FALSE, message=FALSE, warning=FALSE}
national_cvap %>%
filter(group_ID ==  "Asian Detail") %>%
arrange(desc(CVAP)) %>%
rename(Total = total_pop)%>%
select(Group, CVAP,Total)%>%
datatable(colnames = c('Group-Alone' = 'Group'), extensions =
list("Buttons" = NULL, 'FixedColumns'= T, "Scroller"=T),
rownames= FALSE,
options = list(
dom = 'Brt',
buttons = c('copy', 'csv', 'excel'),
scrollX = TRUE,
lengthMenu = c(25, 50, 100), pageLength = 50)) %>% formatCurrency(columns = c(2,3),currency = "", interval = 3, mark = ",", digits=0)
```
## Asian Detailed Origin Combo
```{r echo=FALSE, message=FALSE, warning=FALSE}
national_cvap %>%
filter(group_ID ==  "Asian Detail Combo") %>%
arrange(desc(CVAP)) %>%
rename(Total = total_pop)%>%
select(Group, CVAP,Total)%>%
datatable(colnames = c('Group-Alone/Combo' = 'Group'),extensions =
list("Buttons" = NULL, 'FixedColumns'= T, "Scroller"=T),
rownames= FALSE,
options = list(
dom = 'Brtp',
buttons = c('copy', 'csv', 'excel'),
scrollX = TRUE,
lengthMenu = c(25, 50, 100), pageLength = 50)) %>% formatCurrency(columns = c(2,3),currency = "", interval = 3, mark = ",", digits=0)
```
## NHPI Detailed Origin
```{r echo=FALSE, message=FALSE, warning=FALSE}
national_cvap %>%
filter(group_ID ==  "NHPI Detail") %>%
arrange(desc(CVAP)) %>%
rename(Total = total_pop)%>%
select(Group, CVAP,Total)%>%
datatable(colnames = c('Group-Alone' = 'Group'),extensions =
list("Buttons" = NULL, 'FixedColumns'= T, "Scroller"=T),
rownames= FALSE,
options = list(
dom = 'Brt',
buttons = c('copy', 'csv', 'excel'),
scrollX = TRUE,
lengthMenu = c(25, 50, 100), pageLength = 50)) %>% formatCurrency(columns = c(2,3),currency = "", interval = 3, mark = ",", digits=0)
```
## NHPI Detailed Origin Combo
```{r echo=FALSE, message=FALSE, warning=FALSE}
national_cvap %>%
filter(group_ID ==  "NHPI Detail Combo") %>%
arrange(desc(CVAP)) %>%
rename(Total = total_pop)%>%
select(Group, CVAP,Total)%>%
datatable(colnames = c('Group-Alone/Combo' = 'Group'),extensions =
list("Buttons" = NULL, 'FixedColumns'= T, "Scroller"=T),
rownames= FALSE,
options = list(
dom = 'Brt',
buttons = c('copy', 'csv', 'excel'),
scrollX = TRUE,
lengthMenu = c(25, 50, 100), pageLength = 50)) %>% formatCurrency(columns = c(2,3),currency = "", interval = 3, mark = ",", digits=0)
```
# Education {.tabset .tabset-fade .tabset-pills}
## Major Racial Groups
```{r echo=FALSE, message=FALSE, warning=FALSE}
national_edu %>%
filter(group_ID ==  "Major Racial Groups") %>%
arrange(desc(total_pop)) %>%
rename(Total = total_pop)%>%
select(-group_ID) %>%
mutate(BA_Higher = round((`BA or Higher`/Total)*100,2))%>%
hchart( "bar", hcaes(x = Group, y = BA_Higher)) %>%
hc_add_theme(hc_theme_tufte()) %>% # hc_colors("#008fd5") %>%
hc_yAxis(title = list(text = "Bachelor's Degree or Higher"),
labels= list(style =list(color ="black", fontSize='12px'),
format= "{value}%"), max = 100) %>%
hc_xAxis(title = list(text = "Group"),
labels= list(style =list(color ="#E26069", fontSize='15px'))) %>%
hc_tooltip(pointFormat = "{point.y}%") %>%
hc_title(text = "Educational Attainment",
margin = 20, align = "left",
style = list(color = "#E26069"))%>%
hc_subtitle(text = "(2011-2015 ACS)",
margin = 20, align = "left",
style = list(color = "#E26069"))
library(forcats)
library(DT)
library(readxl)
library(tidyverse)
library(highcharter)
library(glue)
knitr::knit_hooks$set(inline = function(x) { if(!is.numeric(x)){ x }else{ prettyNum(round(x,2), big.mark=",", digits=6) } })
hcoptslang <- getOption("highcharter.lang")
hcoptslang$thousandsSep <- ","
options(highcharter.lang = hcoptslang)
national_cvap<- readxl::read_xlsx("national_dta.xlsx", sheet = "CVAP")
national_edu<- readxl::read_xlsx("national_dta.xlsx", sheet = "Education")
national_edu<- national_edu %>% rename(`HS/GED` = total_hsged,
`HS or Higher` = total_hs_higher,
`Bachelor's` = total_ba,
`BA or Higher` = total_ba_higher)
national_edu %>%
filter(group_ID ==  "Major Racial Groups") %>%
arrange(desc(total_pop)) %>%
rename(Total = total_pop)%>%
select(-group_ID) %>%
mutate(BA_Higher = round((`BA or Higher`/Total)*100,2))%>%
hchart( "bar", hcaes(x = Group, y = BA_Higher)) %>%
hc_add_theme(hc_theme_tufte()) %>% # hc_colors("#008fd5") %>%
hc_yAxis(title = list(text = "Bachelor's Degree or Higher"),
labels= list(style =list(color ="black", fontSize='12px'),
format= "{value}%"), max = 100, opposite=TRUE) %>%
hc_xAxis(title = list(text = "Group"),
labels= list(style =list(color ="#E26069", fontSize='15px'))) %>%
hc_tooltip(pointFormat = "{point.y}%") %>%
hc_title(text = "Educational Attainment",
margin = 20, align = "left",
style = list(color = "#E26069"))%>%
hc_subtitle(text = "(2011-2015 ACS)",
margin = 20, align = "left",
style = list(color = "#E26069"))
national_edu %>%
filter(group_ID ==  "Major Racial Groups") %>%
arrange(desc(total_pop)) %>%
rename(Total = total_pop)%>%
select(-group_ID) %>%
mutate(BA_Higher = round((`BA or Higher`/Total)*100,2))%>%
hchart( "bar", hcaes(x = Group, y = BA_Higher)) %>%
hc_add_theme(hc_theme_tufte()) %>% # hc_colors("#008fd5") %>%
hc_yAxis(title = list(text = "Bachelor's Degree or Higher"),
labels= list(style =list(color ="black", fontSize='12px'),
format= "{value}%"), max = 100, opposite=TRUE) %>%
hc_xAxis(title = list(text = "Group"),
labels= list(style =list(color ="#E26069", fontSize='15px')),
minorTicks=F) %>%
hc_tooltip(pointFormat = "{point.y}%") %>%
hc_title(text = "Educational Attainment",
margin = 20, align = "left",
style = list(color = "#E26069"))%>%
hc_subtitle(text = "(2011-2015 ACS)",
margin = 20, align = "left",
style = list(color = "#E26069"))
national_edu %>%
filter(group_ID ==  "Major Racial Groups") %>%
arrange(desc(total_pop)) %>%
rename(Total = total_pop)%>%
select(-group_ID) %>%
mutate(BA_Higher = round((`BA or Higher`/Total)*100,2))%>%
hchart( "bar", hcaes(x = Group, y = BA_Higher)) %>%
hc_add_theme(hc_theme_tufte()) %>% # hc_colors("#008fd5") %>%
hc_yAxis(title = list(text = "Bachelor's Degree or Higher"),
labels= list(style =list(color ="black", fontSize='12px'),
format= "{value}%"), max = 100, opposite=TRUE) %>%
hc_xAxis(title = list(text = "Group"),
labels= list(style =list(color ="#E26069", fontSize='15px')),
majorTicks=F) %>%
hc_tooltip(pointFormat = "{point.y}%") %>%
hc_title(text = "Educational Attainment",
margin = 20, align = "left",
style = list(color = "#E26069"))%>%
hc_subtitle(text = "(2011-2015 ACS)",
margin = 20, align = "left",
style = list(color = "#E26069"))
national_edu %>%
filter(group_ID ==  "Major Racial Groups") %>%
arrange(desc(total_pop)) %>%
rename(Total = total_pop)%>%
select(-group_ID) %>%
mutate(BA_Higher = round((`BA or Higher`/Total)*100,2))%>%
hchart( "bar", hcaes(x = Group, y = BA_Higher)) %>%
hc_add_theme(hc_theme_tufte()) %>% # hc_colors("#008fd5") %>%
hc_yAxis(title = list(text = "Bachelor's Degree or Higher"),
labels= list(style =list(color ="black", fontSize='12px'),
format= "{value}%"), max = 100, opposite=TRUE) %>%
hc_xAxis(title = list(text = "Group"),
labels= list(style =list(color ="#E26069", fontSize='15px')),
minorTickLength= 0,
tickLength= 0) %>%
hc_tooltip(pointFormat = "{point.y}%") %>%
hc_title(text = "Educational Attainment",
margin = 20, align = "left",
style = list(color = "#E26069"))%>%
hc_subtitle(text = "(2011-2015 ACS)",
margin = 20, align = "left",
style = list(color = "#E26069"))
national_edu %>%
filter(group_ID ==  "Major Racial Groups") %>%
arrange(desc(total_pop)) %>%
rename(Total = total_pop)%>%
select(-group_ID) %>%
mutate(BA_Higher = round((`BA or Higher`/Total)*100,2))%>%
hchart( "bar", hcaes(x = Group, y = BA_Higher)) %>%
hc_add_theme(hc_theme_tufte()) %>% # hc_colors("#008fd5") %>%
hc_yAxis(title = list(text = "Bachelor's Degree or Higher"),
labels= list(style =list(color ="black", fontSize='12px'),
format= "{value}%"), max = 100, opposite=TRUE) %>%
hc_xAxis(title = list(text = "Group"),
labels= list(style =list(color ="#E26069", fontSize='15px')),
minorTickLength= 0,
tickLength= 0) %>%
hc_tooltip(pointFormat = "{point.y}%") %>%
hc_title(text = "Educational Attainment",
margin = 20, align = "left",
style = list(color = "#E26069"))%>%
hc_subtitle(text = "(2011-2015 ACS)",
margin = 20, align = "left",
style = list(color = "#E26069"))
national_edu %>%
filter(group_ID ==  "Major Racial Groups") %>%
arrange(desc(total_pop)) %>%
rename(Total = total_pop)%>%
select(-group_ID) %>%
mutate(BA_Higher = round((`BA or Higher`/Total)*100,2))%>%
hchart( "bar", hcaes(x = Group, y = BA_Higher)) %>%
hc_add_theme(hc_theme_tufte()) %>% # hc_colors("#008fd5") %>%
hc_yAxis(title = list(text = "Bachelor's Degree or Higher"),
labels= list(style =list(color ="black", fontSize='12px'),
format= "{value}%"), max = 100, opposite=TRUE) %>%
hc_xAxis(title = list(text = "Group"),
labels= list(style =list(color ="#E26069", fontSize='15px'))) %>%
hc_tooltip(pointFormat = "{point.y}%") %>%
hc_title(text = "Educational Attainment",
margin = 20, align = "left",
style = list(color = "#E26069"))%>%
hc_subtitle(text = "(2011-2015 ACS)",
margin = 20, align = "left",
style = list(color = "#E26069"))
national_edu %>%
filter(group_ID ==  "Major Racial Groups") %>%
arrange(desc(total_pop)) %>%
rename(Total = total_pop)%>%
select(-group_ID) %>%
mutate(BA_Higher = round((`BA or Higher`/Total)*100,2))%>%
hchart( "bar", hcaes(x = Group, y = BA_Higher)) %>%
hc_add_theme(hc_theme_tufte()) %>% # hc_colors("#008fd5") %>%
hc_yAxis(title = list(text = "Bachelor's Degree or Higher"),
labels= list(style =list(color ="black", fontSize='12px'),
format= "{value}%"), max = 100, opposite=TRUE) %>%
hc_xAxis(title = list(text = "Group"),
labels= list(style =list(color ="#E26069", fontSize='15px')),
minorTickLength= 0,tickLength=0) %>%
hc_tooltip(pointFormat = "{point.y}%") %>%
hc_title(text = "Educational Attainment",
margin = 20, align = "left",
style = list(color = "#E26069"))%>%
hc_subtitle(text = "(2011-2015 ACS)",
margin = 20, align = "left",
style = list(color = "#E26069"))
national_edu %>%
filter(group_ID ==  "Major Racial Groups") %>%
arrange(desc(total_pop)) %>%
rename(Total = total_pop)%>%
select(-group_ID) %>%
mutate(BA_Higher = round((`BA or Higher`/Total)*100,2))%>%
hchart( "bar", hcaes(x = Group, y = BA_Higher)) %>%
hc_add_theme(hc_theme_tufte()) %>% # hc_colors("#008fd5") %>%
hc_yAxis(title = list(text = "Bachelor's Degree or Higher"),
labels= list(style =list(color ="black", fontSize='12px'),
format= "{value}%"), max = 100, opposite=TRUE) %>%
hc_xAxis(title = list(text = ""),
labels= list(style =list(color ="#E26069", fontSize='15px')),
minorTickLength= 0,tickLength=0) %>%
hc_tooltip(pointFormat = "{point.y}%") %>%
hc_title(text = "Educational Attainment",
margin = 20, align = "left",
style = list(color = "#E26069"))%>%
hc_subtitle(text = "(2011-2015 ACS)",
margin = 20, align = "left",
style = list(color = "#E26069"))
#render your sweet site.
rmarkdown::render_site()
national_cvap %>%
filter(group_ID ==  "Asian Detail Combo") %>%
arrange(desc(CVAP)) %>%
rename(Total = total_pop)%>%
select(Group, CVAP,Total)%>%
datatable(colnames = c('Group-Alone/Combo' = 'Group'),extensions =
list("Buttons" = NULL, 'FixedColumns'= T, "Scroller"=T),
rownames= FALSE,
options = list(
dom = 'rtpB',
buttons = c('copy', 'csv', 'excel'),
scrollX = TRUE,
lengthMenu = c(25, 50, 100), pageLength = 50)) %>% formatCurrency(columns = c(2,3),currency = "", interval = 3, mark = ",", digits=0)
national_tbl_display <- function(data,group){
data %>%
filter(group_ID ==  paste(group)) %>%
arrange(desc(CVAP)) %>%
rename(Total = total_pop)%>%
select(Group, CVAP,Total )%>%
datatable(extensions =
list("Buttons" = NULL, 'FixedColumns'= T, "Scroller"=T),
rownames= FALSE,
options = list(
dom = 'Brt',
buttons = c('copy', 'csv', 'excel'),
scrollX = TRUE,
lengthMenu = c(25, 50, 100), pageLength = 50)) %>% formatCurrency(columns = c(2,3),currency = "", interval = 3, mark = ",", digits=0)
}
national_tbl_display(national_cvap,"Major Racial Groups")
national_tbl_display(national_cvap,"Asian Detail")
