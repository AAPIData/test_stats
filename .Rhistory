geom_text(aes(label= label), position = position_dodge2(width = 1), hjust=-.2, size=10)
ethniclarge %>% ggplot(aes(x = factor(Group), y = Estimate/1000000, group = Type, fill= Type)) +
geom_bar(stat="identity", position = "dodge") +
theme_ipsum_rc(grid=F) +ggtitle("Asian American Population Estimates",subtitle = "ACS 2011-2015 5 Year Tables") +
scale_fill_economist()+
coord_flip() +
scale_y_comma(limits=c(0,5),name = "Million") +
#theme(text = element_text(size=20))+
theme(axis.text.y=element_text(size=15, face="bold"),
plot.title = element_text(size=25),
plot.subtitle = element_text(size = 20))+
theme(axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())+
geom_text(aes(label= label), position = position_dodge2(width = 1), hjust=-.1, size=10)
ethniclarge %>% ggplot(aes(x = factor(Group), y = Estimate/1000000, group = Type, fill= Type)) +
geom_bar(stat="identity", position = "dodge") +
theme_ipsum_rc(grid=F) +ggtitle("Asian American Population Estimates",subtitle = "ACS 2011-2015 5 Year Tables") +
scale_fill_economist()+
coord_flip() +
scale_y_comma(limits=c(0,5),name = "Million") +
#theme(text = element_text(size=20))+
theme(axis.text.y=element_text(size=15, face="bold"),
plot.title = element_text(size=25),
plot.subtitle = element_text(size = 20))+
theme(axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())+
geom_text(aes(label= label), position = position_dodge2(width = 1), hjust=-.1, size=8)
ggsave('Dropbox/AAPIData HQ/Documentation and Protocols/ACS Best Practices/acs_pop_comparison2.png',width = 15, dpi = 300)
ggsave('Dropbox/AAPIData HQ/Documentation and Protocols/ACS Best Practices/acs_pop_comparison2.png',width = 15, dpi = 300, scale = .8)
ggsave('Dropbox/AAPIData HQ/Documentation and Protocols/ACS Best Practices/acs_pop_comparison2.png',width = 20, dpi = 300, scale = .8)
ggsave('Dropbox/AAPIData HQ/Documentation and Protocols/ACS Best Practices/acs_pop_comparison2.png',width = 15, dpi = 300, scale = .5)
ggsave('Dropbox/AAPIData HQ/Documentation and Protocols/ACS Best Practices/acs_pop_comparison2.png',width = 15, dpi = 300)
ggsave('Dropbox/AAPIData HQ/Documentation and Protocols/ACS Best Practices/acs_pop_comparison2.png',width = 19, dpi = 300)
ggsave('Dropbox/AAPIData HQ/Documentation and Protocols/ACS Best Practices/acs_pop_comparison2.png',width = 19, height = 12, dpi = 300)
ggsave('Dropbox/AAPIData HQ/Documentation and Protocols/ACS Best Practices/acs_pop_comparison2.png',width = 19, height = 10, dpi = 300)
install.packages("blogdown")
blogdown::install_hugo()
blogdown::install_hugo()
setwd("~/quick_stats")
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
Asian_orign_alone <- c(13:29)
racial_groups<- c(1,2,4,6,12,32,50,60)
library(forcats)
library(DT)
library(readxl)
library(tidyverse)
library(highcharter)
library(glue)
knitr::knit_hooks$set(inline = function(x) { if(!is.numeric(x)){ x }else{ prettyNum(round(x,2), big.mark=",", digits=6) } })
hcoptslang <- getOption("highcharter.lang")
hcoptslang$thousandsSep <- ","
options(highcharter.lang = hcoptslang)
#national_cvap<- readxl::read_xlsx("state_dta.xlsx", sheet = "CVAP")
state_edu<- readxl::read_xlsx("state_dta.xlsx")
state_edu<- national_edu %>% rename(`Total Population` = total,
`HS or Higher` = tot_hs_higher,
`BA or Higher` = tot_bahigher)
state_edu<- state_edu %>% rename(`Total Population` = total,
`HS or Higher` = tot_hs_higher,
`BA or Higher` = tot_bahigher)
racial_groups<- c(1,2,4,6,12,32,50,60)
Asian_orign_alone <- c(13:29)
Asian_origin_combo<- c(32:48)
NHPI_origin_alone <- c(51,55,56)
NHPI_origin_combo<- c(61:66)
#national_cvap<- readxl::read_xlsx("state_dta.xlsx", sheet = "CVAP")
state_edu<- readxl::read_xlsx("state_dta.xlsx")
state_edu<- state_edu %>% rename( `HS or Higher` = tot_hs_higher,
`BA or Higher` = tot_bahigher)
state_edu %>%
filter(pop_id %in%  racial_groups)
state_edu %>%
filter(pop_id %in%  racial_groups) %>%
arrange(desc(total))
state_edu %>%
filter(pop_id %in%  racial_groups) %>%
arrange(desc(total)) %>%
rename(Total = total)
state_edu %>% nest(-pop_group)
state_edu %>% nest(-State)
state_edu %>% nest(-Geography)
state_edu %>% nest(-Geography) %>% unnest(-pop_group)
state_edu %>% nest(-Geography)
state_edu %>% nest(-Geography, -pop_id) %>%
state_edu %>% nest(-Geography, -pop_id)
state_edu %>% nest(-Geography, -pop_id)
state_edu %>% nest(-Geography)
#national_cvap<- readxl::read_xlsx("state_dta.xlsx", sheet = "CVAP")
state_edu<- readxl::read_xlsx("state_dta.xlsx")
state_edu %>% select(Geography, pop_id,total:tot_bahigher)
state_edu_long<- state_edu %>%  gather( estimate_type, estimate, -st_name ,-pop_id)
state_edu_long<- state_edu %>%  gather( estimate_type, estimate, -Geography ,-pop_id)
View(state_edu_long)
state_edu_long<- state_edu %>% select(pop_group)  %>%
gather(estimate_type, estimate, -Geography ,-pop_id)
state_edu_long<- state_edu %>% select(-pop_group)  %>%
gather(estimate_type, estimate, -Geography ,-pop_id)
View(state_edu_long)
state_edu<- readxl::read_xlsx("state_dta.xlsx")
state_edu$pop_id<- as.factor(state_edu$pop_id)
state_edu_long<- state_edu %>% select(-pop_group)  %>%
gather(estimate_type, estimate, -Geography ,-pop_id)
state_edu_alone <- state_edu_long  %>% filter(pop_id %in% racial_groups )
state_edu_alone$pop_id <- fct_recode(state_edu_alone$pop_id,
"Total Population" = "1",
"White" = "2",
"Black" = "4",
"AIAN" = "6",
"Asian Alone" = "12",
"Asian Combo" = "32",
"NHPI Alone" = "50",
"NHPI Combo"= "60")
## Recoding state_edu_alone$estimate_type
state_edu_alone$estimate_type <- fct_recode(state_edu_alone$estimate_type,
"HS or GED" = "total_hsged",
"HS or Higher" = "tot_hs_higher",
"BA or Higher" = "tot_bahigher")
state_edu<- readxl::read_xlsx("state_dta.xlsx")
state_edu$pop_id<- as.factor(state_edu$pop_id)
state_edu_long<- state_edu %>% select(-pop_group)  %>%
gather(estimate_type, estimate, -Geography ,-pop_id)
#state_edu<- state_edu %>% rename( `HS or Higher` = tot_hs_higher,
#                                       `BA or Higher` = tot_bahigher)
racial_groups<- c(1,2,4,6,12,32,50,60)
Asian_orign_alone <- c(13:29)
Asian_origin_combo<- c(32:48)
NHPI_origin_alone <- c(51,55,56)
NHPI_origin_combo<- c(61:66)
state_edu_alone <- state_edu_long  %>% filter(pop_id %in% racial_groups )
state_edu_alone$pop_id <- fct_recode(state_edu_alone$pop_id,
"Total Population" = "1",
"White" = "2",
"Black" = "4",
"AIAN" = "6",
"Asian Alone" = "12",
"Asian Combo" = "32",
"NHPI Alone" = "50",
"NHPI Combo"= "60")
## Recoding state_edu_alone$estimate_type
state_edu_alone$estimate_type <- fct_recode(state_edu_alone$estimate_type,
"HS or Higher" = "tot_hs_higher",
"BA or Higher" = "tot_bahigher",
"Total", ="Total")
## Recoding state_edu_alone$estimate_type
state_edu_alone$estimate_type <- fct_recode(state_edu_alone$estimate_type,
"HS or Higher" = "tot_hs_higher",
"BA or Higher" = "tot_bahigher",
"Total" ="total")
state_edu_alone
library(forcats)
library(DT)
library(readxl)
library(tidyverse)
library(highcharter)
library(glue)
knitr::knit_hooks$set(inline = function(x) { if(!is.numeric(x)){ x }else{ prettyNum(round(x,2), big.mark=",", digits=6) } })
hcoptslang <- getOption("highcharter.lang")
hcoptslang$thousandsSep <- ","
options(highcharter.lang = hcoptslang)
#national_cvap<- readxl::read_xlsx("state_dta.xlsx", sheet = "CVAP")
state_edu<- readxl::read_xlsx("state_dta.xlsx")
state_edu$pop_id<- as.factor(state_edu$pop_id)
state_edu_long<- state_edu %>% select(-pop_group)  %>%
gather(estimate_type, estimate, -Geography ,-pop_id)
#state_edu<- state_edu %>% rename( `HS or Higher` = tot_hs_higher,
#                                       `BA or Higher` = tot_bahigher)
racial_groups<- c(1,2,4,6,12,32,50,60)
Asian_orign_alone <- c(13:29)
Asian_origin_combo<- c(32:48)
NHPI_origin_alone <- c(51,55,56)
NHPI_origin_combo<- c(61:66)
state_edu_alone <- state_edu_long  %>% filter(pop_id %in% racial_groups )
state_edu_alone$pop_id <- fct_recode(state_edu_alone$pop_id,
"Total Population" = "1",
"White" = "2",
"Black" = "4",
"AIAN" = "6",
"Asian Alone" = "12",
"Asian Combo" = "32",
"NHPI Alone" = "50",
"NHPI Combo"= "60")
## Recoding state_edu_alone$estimate_type
state_edu_alone$estimate_type <- fct_recode(state_edu_alone$estimate_type,
"HS or Higher" = "tot_hs_higher",
"BA or Higher" = "tot_bahigher",
"Total" ="total")
state_edu_alone %>%
mutate(long_key=paste(pop_id, estimate_type, sep=": "))
state_edu_alone %>%
mutate(long_key=paste(pop_id, estimate_type, sep=": ")) %>% #Combining Pop_ID and Estimate type
select(-pop_id, -estimate_type)
state_edu_alone %>%
mutate(long_key=paste(pop_id, estimate_type, sep=": ")) %>% #Combining Pop_ID and Estimate type
select(-pop_id, -estimate_type) %>%
spread(long_key, estimate,fill = "No Data") %>%
rename(State= Geography)
state_edu_alone %>%
mutate(long_key=paste(pop_id, estimate_type, sep=": ")) %>% #Combining Pop_ID and Estimate type
select(-pop_id, -estimate_type) %>%
spread(long_key, estimate,fill = "No Data") %>%
rename(State= Geography) %>%
datatable(extensions =
list("Buttons" = NULL, 'FixedColumns'=T, "Scroller"=T),
rownames= FALSE,
options = list(
dom = 'Brtip',
buttons = c('copy', 'csv', 'excel'),
scrollX = TRUE,
lengthMenu = c(25, 50, 100), pageLength = 50,
deferRender = TRUE,
scrollY = 400,
scroller = TRUE,
fixedColumns = list(leftColumns = 1))) %>%
formatCurrency(columns = c(2,3,5,6,7,9,10,11,13),currency = "", interval = 3, mark = ",", digits=0) %>%
formatPercentage(columns = c(4,8,12),digits = 1)
state_edu_alone %>%
mutate(long_key=paste(pop_id, estimate_type, sep=": ")) %>% #Combining Pop_ID and Estimate type
select(-pop_id, -estimate_type) %>%
spread(long_key, estimate,fill = "No Data") %>%
rename(State= Geography) %>%
datatable(extensions =
list("Buttons" = NULL, 'FixedColumns'= T, "Scroller"=T),
rownames= FALSE,
options = list(
dom = 'Brt',
buttons = c('copy', 'csv', 'excel'),
scrollX = TRUE,
lengthMenu = c(25, 50, 100), pageLength = 50)) %>% formatCurrency(columns = c(2,3),currency = "", interval = 3, mark = ",", digits=0)
#render your sweet site.
rmarkdown::render_site()
racial_asn_groups<- c(1,12,32,50,60)
state_edu_alone <- state_edu_long  %>% filter(pop_id %in% aapi_alone )
state_edu_long
state_edu_alone %>%
mutate(long_key=paste(pop_id, estimate_type, sep=": "))
state_edu<- readxl::read_xlsx("state_dta.xlsx")
state_edu$pop_id<- as.factor(state_edu$pop_id)
state_edu <- state_edu %>% mutate(
pct_hs_higher = round(tot_hs_higher*100,2),
pct_ba_higher = round(tot_bahigher*100,2)
)
state_edu_long<- state_edu %>% select(-pop_group , -tot_hs_higher,-tot_bahigher )  %>%
gather(estimate_type, estimate, -Geography ,-pop_id)
View(state_edu_long)
library(forcats)
library(DT)
library(readxl)
library(tidyverse)
library(highcharter)
library(glue)
knitr::knit_hooks$set(inline = function(x) { if(!is.numeric(x)){ x }else{ prettyNum(round(x,2), big.mark=",", digits=6) } })
hcoptslang <- getOption("highcharter.lang")
hcoptslang$thousandsSep <- ","
options(highcharter.lang = hcoptslang)
#national_cvap<- readxl::read_xlsx("state_dta.xlsx", sheet = "CVAP")
state_edu<- readxl::read_xlsx("state_dta.xlsx")
state_edu$pop_id<- as.factor(state_edu$pop_id)
state_edu <- state_edu %>% mutate(
pct_hs_higher = round(tot_hs_higher*100,2),
pct_ba_higher = round(tot_bahigher*100,2)
)
state_edu_long<- state_edu %>% select(-pop_group , -tot_hs_higher,-tot_bahigher )  %>%
gather(estimate_type, estimate, -Geography ,-pop_id)
#state_edu<- state_edu %>% rename( `HS or Higher` = tot_hs_higher,
#                                       `BA or Higher` = tot_bahigher)
racial_groups<- c(1,2,4,6,12,32,50,60)
aapi_alone<- c(1,12,50)
aapi_combo<- c(1,31,60)
Asian_orign_alone <- c(13:29)
Asian_origin_combo<- c(32:48)
NHPI_origin_alone <- c(51,55,56)
NHPI_origin_combo<- c(61:66)
state_edu_alone <- state_edu_long  %>% filter(pop_id %in% aapi_alone )
state_edu_alone$pop_id <- fct_recode(state_edu_alone$pop_id,
"Total Population" = "1",
"Asian Alone" = "12",
"NHPI Alone" = "50")
## Recoding state_edu_alone$estimate_type
state_edu_alone$estimate_type <- fct_recode(state_edu_alone$estimate_type,
"HS or Higher" = "pct_hs_higher",
"BA or Higher" = "pct_ba_higher",
"Total" ="total")
state_edu_alone %>%
mutate(long_key=paste(pop_id, estimate_type, sep=": ")) %>% #Combining Pop_ID and Estimate type
select(-pop_id, -estimate_type) %>%
spread(long_key, estimate,fill = "No Data") %>%
rename(State= Geography)
state_edu<- readxl::read_xlsx("state_dta.xlsx")
state_edu$pop_id<- as.factor(state_edu$pop_id)
state_edu <- state_edu %>% mutate(
pct_hs_higher = round((tot_hs_higher/total)*100,2),
pct_ba_higher = round((tot_bahigher/total)*100,2)
)
state_edu_long<- state_edu %>% select(-pop_group , -tot_hs_higher,-tot_bahigher )  %>%
gather(estimate_type, estimate, -Geography ,-pop_id)
#state_edu<- state_edu %>% rename( `HS or Higher` = tot_hs_higher,
#                                       `BA or Higher` = tot_bahigher)
racial_groups<- c(1,2,4,6,12,32,50,60)
aapi_alone<- c(1,12,50)
aapi_combo<- c(1,31,60)
Asian_orign_alone <- c(13:29)
Asian_origin_combo<- c(32:48)
NHPI_origin_alone <- c(51,55,56)
NHPI_origin_combo<- c(61:66)
state_edu_alone <- state_edu_long  %>% filter(pop_id %in% aapi_alone )
state_edu_alone$pop_id <- fct_recode(state_edu_alone$pop_id,
"Total Population" = "1",
"Asian Alone" = "12",
"NHPI Alone" = "50")
## Recoding state_edu_alone$estimate_type
state_edu_alone$estimate_type <- fct_recode(state_edu_alone$estimate_type,
"HS or Higher" = "pct_hs_higher",
"BA or Higher" = "pct_ba_higher",
"Total" ="total")
state_edu<- readxl::read_xlsx("state_dta.xlsx")
state_edu$pop_id<- as.factor(state_edu$pop_id)
state_edu <- state_edu %>% mutate(
pct_hs_higher = round((tot_hs_higher/total)*100,2),
pct_ba_higher = round((tot_bahigher/total)*100,2)
)
state_edu_long<- state_edu %>% select(-pop_group , -tot_hs_higher,-tot_bahigher )  %>%
gather(estimate_type, estimate, -Geography ,-pop_id)
#state_edu<- state_edu %>% rename( `HS or Higher` = tot_hs_higher,
#                                       `BA or Higher` = tot_bahigher)
racial_groups<- c(1,2,4,6,12,32,50,60)
aapi_alone<- c(1,12,50)
aapi_combo<- c(1,31,60)
Asian_orign_alone <- c(13:29)
Asian_origin_combo<- c(32:48)
NHPI_origin_alone <- c(51,55,56)
NHPI_origin_combo<- c(61:66)
state_edu_alone <- state_edu_long  %>% filter(pop_id %in% aapi_alone )
state_edu_alone$pop_id <- fct_recode(state_edu_alone$pop_id,
"Total Population" = "1",
"Asian Alone" = "12",
"NHPI Alone" = "50")
## Recoding state_edu_alone$estimate_type
state_edu_alone$estimate_type <- fct_recode(state_edu_alone$estimate_type,
"HS or Higher" = "pct_hs_higher",
"BA or Higher" = "pct_ba_higher",
"Total" ="total")
View(state_edu_long)
state_edu_alone %>%
mutate(long_key=paste(pop_id, estimate_type, sep=": ")) %>% #Combining Pop_ID and Estimate type
select(-pop_id, -estimate_type) %>%
spread(long_key, estimate,fill = "No Data")
state_edu_alone %>%
mutate(long_key=paste(pop_id, estimate_type, sep=": "))
View(state_edu_long)
state_edu_alone %>%
mutate(long_key=paste(pop_id, estimate_type, sep=": ")) %>% #Combining Pop_ID and Estimate type
select(-pop_id, -estimate_type)
state_edu_alone %>%
mutate(long_key=paste(pop_id, estimate_type, sep=": ")) %>% #Combining Pop_ID and Estimate type
select(-pop_id, -estimate_type) %>%
spread(long_key, estimate,fill = "No Data") %>%
rename(State= Geography)
#render your sweet site.
rmarkdown::render_site()
View(state_edu)
state_edu %>% filter(pop_id=1)
state_edu %>% filter(pop_id==1)
state_edu %>% filter(pop_id==1)
avg_hs_higher <- state_edu %>% filter(pop_id == 1)
View(avg_hs_higher)
state_edu %>% filter(pop_id == 1) %>% group_by(Geography) %>% summarise(avg = mean(pct_hs_higher))
state_edu %>% filter(pop_id == 1) %>% group_by(Geography) %>% summarise(avg = mean(pct_hs_higher))
avg_hs_higher <- state_edu %>% filter(pop_id == 1) %>% group_by(Geography) %>% summarise(avg = mean(pct_hs_higher))
View(avg_hs_higher)
avg_hs_higher <- state_edu %>% filter(pop_id == 1) %>% group_by(Geography)
View(avg_hs_higher)
avg_hs_higher <- state_edu %>% filter(pop_id == 1) %>% group_by(Geography) %>% mutate(avg = mean(pct_hs_higher))
View(avg_hs_higher)
avg_hs_higher <- state_edu %>% filter(pop_id == 1) %>% select(Geography, pct_hs_higher) %>%
avg_hs_higher <- state_edu %>% filter(pop_id == 1) %>% select(Geography, pct_hs_higher)
avg_hs_higher <- state_edu %>% filter(pop_id == 1) %>% select(Geography, pct_hs_higher)
View(avg_hs_higher)
avg_hs_higher <- state_edu %>% filter(pop_id == 1) %>% select(Geography, pct_hs_higher) %>%  group_by(Geography) %>% mutate(avg = mean(pct_hs_higher))
View(avg_hs_higher)
avg_hs_higher <- state_edu %>% filter(pop_id == 1) %>% select(Geography, pct_hs_higher) %>%  group_by(Geography,pct_hs_higher) %>% mutate(avg = mean(pct_hs_higher))
View(avg_hs_higher)
avg_hs_higher <- state_edu %>% filter(pop_id == 1) %>% select(Geography, pct_hs_higher) %>%  summarize(mean = mean(pct_hs_higher))
View(avg_hs_higher)
state_edu %>% filter(pop_id == 1) %>% select(Geography, pct_hs_higher) %>%  summarize(mean = mean(pct_hs_higher))
avg_hs_higher %>% formatPercentage(columns=1)
avg_hs_higher <- state_edu %>% filter(pop_id == 1) %>% select(Geography, pct_hs_higher) %>%  summarize(mean = round(mean(pct_hs_higher)*100),2)
View(avg_hs_higher)
avg_hs_higher <- state_edu %>% filter(pop_id == 1) %>% select(Geography, pct_hs_higher) %>%  summarize(mean = round(mean(pct_hs_higher)),2)
avg_hs_higher <- state_edu %>% filter(pop_id == 1) %>% select(Geography, pct_hs_higher) %>%  summarize(mean = mean(pct_hs_higher))
View(avg_hs_higher)
state_edu<- readxl::read_xlsx("state_dta.xlsx")
state_edu$pop_id<- as.factor(state_edu$pop_id)
state_edu <- state_edu %>% mutate(
pct_hs_higher = tot_hs_higher/total,
pct_ba_higher = tot_bahigher/total)
state_edu_long<- state_edu %>% select(-pop_group , -tot_hs_higher,-tot_bahigher )  %>%
gather(estimate_type, estimate, -Geography ,-pop_id)
#state_edu<- state_edu %>% rename( `HS or Higher` = tot_hs_higher,
#                                       `BA or Higher` = tot_bahigher)
avg_hs_higher <- state_edu %>% filter(pop_id == 1) %>% select(Geography, pct_hs_higher) %>%  summarize(mean = mean(pct_hs_higher))
avg_hs_higher <- state_edu %>% filter(pop_id == 1) %>% select(Geography, pct_hs_higher) %>%  summarize(mean = mean(pct_hs_higher)) %>% pull()
avg_hs_higher <- state_edu %>% filter(pop_id == 1) %>% select(Geography, pct_hs_higher) %>%  summarize(mean = mean(pct_hs_higher)) %>% pull(round(.,2))
state_edu %>% filter(pop_id == 1) %>% select(Geography, pct_hs_higher) %>%  summarize(mean = mean(pct_hs_higher)) %>% pull(round(.,2))
avg_hs_higher <- state_edu %>% filter(pop_id == 1) %>% select(Geography, pct_hs_higher) %>%  summarize(mean = mean(pct_hs_higher)) %>% pull(round(,2))
avg_hs_higher <- state_edu %>% filter(pop_id == 1) %>% select(Geography, pct_hs_higher) %>%  summarize(mean = mean(pct_hs_higher)) %>% pull() %>% round(.,2)
avg_hs_higher <- state_edu %>% filter(pop_id == 1) %>% select(Geography, pct_hs_higher) %>%  summarize(mean = mean(pct_hs_higher)) %>% pull() %>% round(.,4)
avg_hs_higher <- avg_hs_higher*100
