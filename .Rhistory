fixedColumns = list(leftColumns = 1),
lengthMenu = c(25, 50, 100), pageLength = 50)) %>% formatCurrency(columns = c(2:6),currency = "", interval = 3, mark = ",", digits=0)
national_edu %>%
filter(group_id ==  "Asian Detail") %>%
select(group_name_rec, pct_hsless, pct_bahigher) %>%
arrange(desc(pct_bahigher)) %>%
mutate(`BA or Higher` = round((pct_bahigher*100),2),
`Less than HS` = round((pct_hsless*100),2))  %>%
select(-pct_hsless, -pct_bahigher) %>%
gather(estimate_type,estimate, -group_name_rec) %>%
hchart( "bar", hcaes(x = group_name_rec , y = estimate, group = estimate_type)) %>%
hc_add_theme(hc_theme_tufte2()) %>%  hc_colors(colors = c("#E26069","#008fd5")) %>%
hc_yAxis(title = list(text = ""),
labels= list(style =list(color ="black", fontSize='12px'),
format= "{value}%"), max = 100, opposite=TRUE) %>%
hc_xAxis(title = list(text = ""),
labels= list(style =list(color ="#E5790D", fontSize='15px')),
minorTickLength= 0,tickLength=0) %>%
hc_tooltip(pointFormat = "{series.name}: {point.y}%") %>%
hc_title(text = "Educational Attainment",
margin = 20, align = "left",
style = list(color = "#E5790D"))%>%
hc_subtitle(text = "(2011-2015 ACS)",
margin = 20, align = "left",
style = list(color = "#E5790D"))
national_edu %>%
filter(group_id ==  "Asian Detail") %>%
select(group_name_rec, pct_hsless, pct_bahigher) %>%
arrange(desc(pct_bahigher)) %>%
mutate(`BA or Higher` = round((pct_bahigher*100),2),
`Less than HS` = round((pct_hsless*100),2))  %>%
select(-pct_hsless, -pct_bahigher) %>%
gather(estimate_type,estimate, -group_name_rec)
national_edu %>%
filter(group_id ==  "Asian Detail") %>%
select(group_name_rec, pct_hsless, pct_bahigher) %>%
arrange(desc(pct_bahigher)) %>%
mutate(`BA or Higher` = round((pct_bahigher*100),2),
`Less than HS` = round((pct_hsless*100),2))  %>%
select(-pct_hsless, -pct_bahigher) %>%
gather(estimate_type,estimate, -group_name_rec) %>%
hchart( "bar", hcaes(x = group_name_rec , y = estimate, group = estimate_type))
national_edu %>%
filter(group_id ==  "Asian Detail") %>%
select(group_name_rec, pct_hsless, pct_bahigher) %>%
arrange(desc(pct_bahigher)) %>%
mutate(`BA or Higher` = round((pct_bahigher*100),2),
`Less than HS` = round((pct_hsless*100),2))  %>%
select(-pct_hsless, -pct_bahigher) %>%
gather(estimate_type,estimate, -group_name_rec) %>%
hchart( "bar", hcaes(x = group_name_rec , y = estimate, group = estimate_type)) %>%
hc_add_theme(hc_theme_tufte2()) %>%  hc_colors(colors = c("#E26069","#008fd5")) %>%
hc_yAxis(title = list(text = ""),
labels= list(style =list(color ="black", fontSize='12px'),
format= "{value}%"), max = 100, opposite=TRUE) %>%
hc_xAxis(title = list(text = ""),
labels= list(style =list(color ="#E5790D", fontSize='12px')),
minorTickLength= 0,tickLength=0) %>%
hc_tooltip(pointFormat = "{series.name}: {point.y}%") %>%
hc_title(text = "Educational Attainment",
margin = 20, align = "left",
style = list(color = "#E5790D"))%>%
hc_subtitle(text = "(2011-2015 ACS)",
margin = 20, align = "left",
style = list(color = "#E5790D"))
library(waffle)
parts <- c(80, 30, 20, 10)
waffle(parts, rows=8)
parts <- c(80)
waffle(parts, rows=8)
library(extrafont)
waffle(parts/10, rows=3, colors=c("#969696", "#1879bf", "#009bda"),
use_glyph="medkit", size=8)
parts<-c(5,5)
waffle(parts/10, rows=3, colors=c("#969696", "#1879bf", "#009bda"),
use_glyph="medkit", size=8)
parts<-c(5,5)
waffle(parts/10, rows=1, colors=c("#969696", "#1879bf", "#009bda"),
use_glyph="medkit", size=8)
waffle(parts/10, rows=1,
use_glyph="medkit", size=8)
professional <- c(`Male`=44, `Female (56%)`=56)
waffle(professional, rows=10, size=0.5, colors=c("#af9139", "#544616"))
waffle(professional, rows=1, size=0.5, colors=c("#af9139", "#544616"))
professional <- c(`Bachelor's Degree or Higher`=5, `Female (56%)`=5)
waffle(professional, rows=1, size=0.5, colors=c("#af9139", "#544616"))
waffle(professional, rows=1, size=0.5, colors=c("#af9139"))
waffle(professional, rows=1, size=0.5, colors=c("#af9139", "#969696"))
waffle(professional, rows=1, size=0.5, colors=c("#af9139", "#969696"),
use_glyph="medkit", size=8)
waffle(professional, rows=1, size=0.5, colors=c("#af9139", "#969696"),
use_glyph="medkit")
professional <- c(`Bachelor's Degree or Higher`=5,5)
waffle(professional, rows=1, size=0.5, colors=c("#af9139", "#969696"),
use_glyph="medkit")
waffle(professional, rows=1, size=0.5, colors=c("#af9139", "#969696"),
use_glyph="graduation-cap")
professional <- c(`Bachelor's Degree or Higher`=1,1)
waffle(professional, rows=1, size=0.5, colors=c("#af9139", "#969696"),
use_glyph="graduation-cap")
professional <- c(`Bachelor's Degree or Higher`=2,4)
waffle(professional, rows=1, size=0.5, colors=c("#af9139", "#969696"),
use_glyph="graduation-cap")
professional <- c(`Bachelor's Degree or Higher`=2,2)
waffle(professional, rows=1, size=0.5, colors=c("#af9139", "#969696"),
use_glyph="graduation-cap")
professional <- c(`Bachelor's Degree or Higher`=2,2)
waffle(professional, rows=1, size=0.5, colors=c("#E26069", "#969696"),
use_glyph="graduation-cap")
waffle(professional, rows=1, size=0.5, colors=c("#E26069", "#969696"),
use_glyph="graduation-cap",keep=F)
stats2 <- c(`Bachelor's Degree or Higher`=3,7)
waffle(stats2, rows=1, size=0.5, colors=c("#E26069", "#969696"),
use_glyph="graduation-cap")
waffle(stats2, rows=2, size=0.5, colors=c("#E26069", "#969696"),
use_glyph="graduation-cap")
waffle(stats, rows=3, size=0.5, colors=c("#E26069", "#969696"),
use_glyph="graduation-cap")
stats <- c(`Bachelor's Degree or Higher`=5,5)
waffle(stats, rows=3, size=0.5, colors=c("#E26069", "#969696"),
use_glyph="graduation-cap")
waffle(stats, rows=2, size=0.5, colors=c("#E26069", "#969696"),
use_glyph="graduation-cap", title = "Asian Americans")
stats2 <- c(`Bachelor's Degree or Higher`=3,7)
waffle(stats2, rows=2, size=0.5, colors=c("#E26069", "#969696"),
use_glyph="graduation-cap",title = "US Population")
stats3 <- c(`Bachelor's Degree or Higher`=2,8)
waffle(stats3, rows=2, size=0.5, colors=c("#E26069", "#969696"),
use_glyph="graduation-cap",title = "NHPI Population")
waffle(stats3, rows=2, size=0.2, colors=c("#E26069", "#969696"),
use_glyph="graduation-cap",title = "NHPI Population")
waffle(stats3, rows=2, size=0.1, colors=c("#E26069", "#969696"),
use_glyph="graduation-cap",title = "NHPI Population")
stats3 <- c(`Bachelor's Degree or Higher`=2,8)
waffle(stats3, rows=2, size=0.1, colors=c("#E26069", "#969696"),
use_glyph="graduation-cap",title = "NHPI Population")
test<-waffle(stats3, rows=2, size=0.1, colors=c("#E26069", "#969696"),
use_glyph="graduation-cap",title = "NHPI Population")
test +  theme(legend.position="none")
stats <- c(`Bachelor's Degree or Higher`=5,5)
asian <- waffle(stats, rows=2, size=0.5, colors=c("#E26069", "#969696"),
use_glyph="graduation-cap", title = "Asian Americans")
asian <- asian +  theme(legend.position="none")
stats2 <- c(`Bachelor's Degree or Higher`=3,7)
uspop<- waffle(stats2, rows=2, size=0.5, colors=c("#E26069", "#969696"),
use_glyph="graduation-cap",title = "US Population")
uspop <- uspop +  theme(legend.position="none")
stats3 <- c(`Bachelor's Degree or Higher`=2,8)
nhpi<-waffle(stats3, rows=2, size=0.1, colors=c("#E26069", "#969696"),
use_glyph="graduation-cap",title = "NHPI Population")
nhpi <- nhpi +  theme(legend.position="none")
iron(uspop, asian, nhpi)
iron(uspop, asian, nhpi)+ theme_minimal()
library(hrbrthemes)
iron(uspop, asian, nhpi)+ theme_ipsum_rc()
iron(uspop, asian, nhpi)+ theme_modern_rc()
national_edu %>%
filter(group_id ==  "Major racial groups") %>%
select(group_name_rec, pct_hsless, pct_bahigher) %>%
arrange(desc(pct_bahigher)) %>%
mutate(`BA or Higher` = round((pct_bahigher*100),2),
`Less than HS` = round((pct_hsless*100),2))  %>%
select(-pct_hsless, -pct_bahigher) %>%
gather(estimate_type,estimate, -group_name_rec) %>%
hchart( "bar", hcaes(x = group_name_rec , y = estimate, group = estimate_type)) %>%
hc_add_theme(hc_theme_tufte2()) %>%  hc_colors(colors = c("#E26069","#008fd5")) %>%
hc_yAxis(title = list(text = ""),
labels= list(style =list(color ="black", fontSize='15px'),
format= "{value}%"), max = 100, opposite=TRUE) %>%
hc_xAxis(title = list(text = ""),
labels= list(style =list(color ="#E5790D", fontSize='15px')),
minorTickLength= 0,tickLength=0) %>%
hc_tooltip(pointFormat = "{series.name}: {point.y}%") %>%
hc_title(text = "Educational Attainment",
margin = 20, align = "left",
style = list(color = "#E5790D"))%>%
hc_subtitle(text = "(2011-2015 ACS)",
margin = 20, align = "left",
style = list(color = "#E5790D"))
## Loading Packages
library(forcats)
library(DT)
library(readxl)
library(tidyverse)
library(highcharter)
library(glue)
library(acs)
library(stringr)
## Setting Formatting for output
knitr::knit_hooks$set(inline = function(x) { if(!is.numeric(x)){ x }else{ prettyNum(round(x,2), big.mark=",", digits=6) } })
## Formatting for Graphics
hcoptslang <- getOption("highcharter.lang")
hcoptslang$thousandsSep <- ","
options(highcharter.lang = hcoptslang)
# Getting Map Data?
mapdata <- get_data_from_map(download_map_data("countries/us/us-all"))
#Read in files
state_edu<- readxl::read_xlsx("raw_data/state/state_edu.xlsx")
state_edu$pop_id <- as.factor(state_edu$pop_id)
### Education Cleaning ####
### Getting Rid of Estimates where the "CHECK" variable is flagging uncertainty
state_edu <- state_edu %>%
mutate(est_hsless =
case_when( check_hsless == 1 ~  NA_real_ ,TRUE ~ est_hsless),
est_hsged  =
case_when( check_hsged == 1 ~  NA_real_ ,TRUE ~ est_hsged),
est_somecollegeaa  =
case_when( check_somecollegeaa == 1 ~  NA_real_ ,TRUE ~ est_somecollegeaa),
est_bahigher  =
case_when( check_bahigher == 1 ~  NA_real_ ,TRUE ~ est_bahigher))
# Dropping those indicators
state_edu <- state_edu %>% select(-check_hsless,
-check_hsged,
-check_somecollegeaa,
-check_bahigher)
state_edu <- state_edu %>% mutate(
pct_hsless   = est_hsless/est_totpop,
pct_bahigher = est_bahigher/ est_totpop)
## Creating Lookup for Pop_id
aapi_alone<- c(1,12,50)
aapi_combo<- c(1,31,60)
## Converting it to LONG format
state_edu_long<- state_edu %>% select(-geoid)  %>%
gather(estimate_type,
estimate,
-geodisplaylabel,
-pop_id)
## Recoding state_edu_long$pop_id
state_edu_long$pop_id_rec <- as.character(state_edu_long$pop_id)
state_edu_long$pop_id_rec <- fct_recode(state_edu_long$pop_id_rec,
"State Pop" = "1",
"Asian" = "12",
"Asian" = "31",
"NHPI" = "50",
"NHPI" = "60")
## Recoding state_edu_long$estimate_type into state_edu_long$estimate_type_rec
state_edu_long$estimate_type_rec <- fct_recode(state_edu_long$estimate_type,
"Total Pop" = "est_totpop",
"HS or Less" = "est_hsless",
"HS Diploma" = "est_hsged",
"Some College or AA" = "est_somecollegeaa",
"BA or Higher" = "est_bahigher",
"% HS or Less"= "pct_hsless",
"% BA or Higher" = "pct_bahigher")
state_edu_alone_raw <- state_edu_long  %>%
filter(pop_id %in% aapi_alone) %>%
select(-pop_id,-estimate_type) %>%
filter(estimate_type_rec !="% BA or Higher") %>%
filter(estimate_type_rec !="% HS or Less")
state_edu_combo_raw <- state_edu_long  %>%
filter(pop_id %in% aapi_combo )%>%
select(-pop_id,-estimate_type)%>%
filter(estimate_type_rec !="% BA or Higher") %>%
filter(estimate_type_rec !="% HS or Less")
state_edu_alone_pct <- state_edu_long  %>%
filter(pop_id %in% aapi_alone) %>%
select(-pop_id,-estimate_type) %>%
filter(estimate_type_rec =="% BA or Higher" | estimate_type_rec =="% HS or Less")
state_edu_combo_pct <- state_edu_long  %>%
filter(pop_id %in% aapi_combo )%>%
select(-pop_id,-estimate_type)%>%
filter(estimate_type_rec =="% BA or Higher" | estimate_type_rec =="% HS or Less")
### FUNCTIONS ####
# Table for Just raw counts
state_create_table <- function(data){
data %>%
mutate(long_key=paste(pop_id_rec, estimate_type_rec, sep=": ")) %>% #Combining Pop_ID and Estimate type
select(-pop_id_rec, -estimate_type_rec) %>%
spread(long_key, estimate,fill = NA) %>%
rename(State= geodisplaylabel)
}
state_display_edu_raw <- function(data){
data %>%
datatable(extensions =
list("Buttons" = NULL, 'FixedColumns'= T, "Scroller"=T),
rownames= FALSE,
options = list(
dom = 'rtB',
buttons = c('copy', 'csv', 'excel'),
scrollX = TRUE,
fixedColumns = list(leftColumns = 1),
columnDefs = list(list(className = 'dt-head-left')),
lengthMenu = c(25, 50, 100), pageLength = 50)) %>%
formatCurrency(columns = c(2:16),currency = "", interval = 3, mark = ",", digits=0)
}
state_display_edu_pct <- function(data){
data %>%
datatable(extensions =
list("Buttons" = NULL, 'FixedColumns'= T, "Scroller"=T),
rownames= FALSE,
options = list(
dom = 'rtB',
buttons = c('copy', 'csv', 'excel'),
scrollX = TRUE,
fixedColumns = list(leftColumns = 1),
columnDefs = list(list(className = 'dt-head-left')),
lengthMenu = c(25, 50, 100), pageLength = 50)) %>%
formatPercentage(columns =(2:7),0)
}
### Calculating Average for the sentence
avg_hs_less <- state_edu %>% filter(pop_id == 1) %>% select(geodisplaylabel, pct_hsless) %>%  summarize(mean = mean(pct_hsless)) %>% pull() %>% round(.,4)
avg_hs_less <- avg_hs_less*100
avg_ba_higher <- state_edu %>% filter(pop_id == 1) %>% select(geodisplaylabel, pct_bahigher) %>%  summarize(mean = mean(pct_bahigher)) %>% pull() %>% round(.,4)
avg_ba_higher <- avg_ba_higher*100
## Using the function I created above to spread the data into the right format
state_edu_table_pct<- state_create_table(state_edu_alone_pct)
## Reordering columns (WE should be able to automate this, I got an error when I tried to include it in the function, not sure what the issue is though)
state_edu_table_pct <- state_edu_table_pct [c(1,6,7,2,3,4,5)]
## Passing the created table to the Display Table Function Created Above
state_display_edu_pct(state_edu_table_pct)
mapdata <- get_data_from_map(download_map_data("countries/us/us-all"))
state_edu_table <- state_edu_table %>% mutate(value = `State Population: BA or Higher`*100, na.omit=T)
View(state_edu_table_pct)
state_edu_table_pct <- state_edu_table_pct %>% mutate(value = `State Population: BA or Higher`*100, na.omit=T)
state_edu_table_pct <- state_edu_table_pct %>% mutate(value = `State Pop: % BA or Higher`*100, na.omit=T)
state_edu_table_pct <- state_edu_table_pct %>% mutate(value = `Asian: % BA or Higher`*100, na.omit=T)
state_edu_table_pct <- state_edu_table_pct %>% mutate(value = `NHPI Pop: % BA or Higher`*100, na.omit=T)
state_edu_table_pct <- state_edu_table_pct %>% mutate(value = `NHPI: % BA or Higher`*100, na.omit=T)
View(state_edu_table_pct)
state_edu_table_pct <- state_edu_table_pct %>% mutate(value = `Asian: % BA or Higher`*100, na.omit=T)
state_edu_table_pct <- state_edu_table_pct %>% mutate(value = `NHPI: % BA or Higher`*100, na.omit=T)
mapdata <- get_data_from_map(download_map_data("countries/us/us-all"))
state_edu_table_pct <- state_edu_table_pct %>% mutate(value = `State Pop: % BA or Higher`*100, na.omit=T)
state_edu_table_pct <- state_edu_table_pct %>% mutate(value2 = `Asian: % BA or Higher`*100, na.omit=T)
state_edu_table_pct <- state_edu_table_pct %>% mutate(value3 = `NHPI: % BA or Higher`*100, na.omit=T)
View(state_edu_table_pct)
data(fips.state)
fips.state <- fips.state %>% rename(State = STATE_NAME)
state_edu_table<- state_edu_table %>% inner_join(fips.state, by = "State")
state_edu_table_pct<- state_edu_table_pct %>% inner_join(fips.state, by = "State")
mapdata <- get_data_from_map(download_map_data("countries/us/us-all"))
state_edu_table_pct <- state_edu_table_pct %>% mutate(value = `State Pop: % BA or Higher`*100, na.omit=T)
state_edu_table_pct <- state_edu_table_pct %>% mutate(value2 = `Asian: % BA or Higher`*100, na.omit=T)
state_edu_table_pct <- state_edu_table_pct %>% mutate(value3 = `NHPI: % BA or Higher`*100, na.omit=T)
data(fips.state)
fips.state <- fips.state %>% rename(State = STATE_NAME)
state_edu_table_pct<- state_edu_table_pct %>% inner_join(fips.state, by = "State")
#testing<- "Percent BA or Higher \n <table style='font-family:'Avenir Next'; font-size:2vmin'>\n  <tr>\n  <th>{point.name}:</th>\n    <td> {point.value:.1f}%</td>\n  </tr>\n  <tr>\n    <th>Asian Alone:</th>\n    <td> #{point.value2:.1f}%</td>\n  </tr>\n  <tr>\n    <th>NHPI Alone:</th>\n    <td> {point.value3:.1f}%</td>\n  </tr>\n</table>"
highchart() %>%
hc_title(text = "Bachelors Degree or Higher", align = "center") %>%
hc_subtitle(text = "Source: 2011-2015 ACS using Asian/NHPI Alone", align = "center") %>%
hc_chart(backgroundColor = "#ffffff") %>%
hc_add_series_map(usgeojson, state_edu_table_pct, name = "Education",value = "value", joinBy = c("postalcode", "STUSAB"),
borderColor= "null",
borderWidth= 0) %>%
hc_tooltip(pointFormat = tooltip_table(x,y,title), useHTML=T,  headerFormat= "")%>%
hc_add_theme(hc_theme_538()) %>%
hc_colorAxis(stops = color_stops(),labels= list(format = "{value}%"),showInLegend=T) %>%
hc_legend(title = list(text= "Statewide Percentage", fontStyle ='italic'),align = "center",verticalAlign = "bottom",
layout = "horizontal", padding = 5)
#testing<- "Percent BA or Higher \n <table style='font-family:'Avenir Next'; font-size:2vmin'>\n  <tr>\n  <th>{point.name}:</th>\n    <td> {point.value:.1f}%</td>\n  </tr>\n  <tr>\n    <th>Asian Alone:</th>\n    <td> #{point.value2:.1f}%</td>\n  </tr>\n  <tr>\n    <th>NHPI Alone:</th>\n    <td> {point.value3:.1f}%</td>\n  </tr>\n</table>"
highchart() %>%
hc_title(text = "Bachelors Degree or Higher", align = "center") %>%
hc_subtitle(text = "Source: 2011-2015 ACS using Asian/NHPI Alone", align = "center") %>%
hc_chart(backgroundColor = "#ffffff") %>%
hc_add_series_map(usgeojson, state_edu_table_pct, name = "Education",value = "value", joinBy = c("postalcode", "STUSAB"),
borderColor= "null",
borderWidth= 0) %>%
hc_tooltip(pointFormat = tooltip_table(x,y,title), useHTML=T,  headerFormat= "")%>%
hc_add_theme(hc_theme_538()) %>%
hc_colorAxis(stops = color_stops(),labels= list(format = "{value}%"),showInLegend=T) %>%
hc_legend(title = list(text= "Statewide Percentage", fontStyle ='italic'),align = "center",verticalAlign = "bottom",
layout = "horizontal", padding = 5)
## Loading Packages
library(forcats)
library(DT)
library(readxl)
library(tidyverse)
library(highcharter)
library(glue)
library(acs)
library(stringr)
## Setting Formatting for output
knitr::knit_hooks$set(inline = function(x) { if(!is.numeric(x)){ x }else{ prettyNum(round(x,2), big.mark=",", digits=6) } })
## Formatting for Graphics
hcoptslang <- getOption("highcharter.lang")
hcoptslang$thousandsSep <- ","
options(highcharter.lang = hcoptslang)
# Getting Map Data?
mapdata <- get_data_from_map(download_map_data("countries/us/us-all"))
#Read in files
state_edu<- readxl::read_xlsx("raw_data/state/state_edu.xlsx")
state_edu$pop_id <- as.factor(state_edu$pop_id)
### Education Cleaning ####
### Getting Rid of Estimates where the "CHECK" variable is flagging uncertainty
state_edu <- state_edu %>%
mutate(est_hsless =
case_when( check_hsless == 1 ~  NA_real_ ,TRUE ~ est_hsless),
est_hsged  =
case_when( check_hsged == 1 ~  NA_real_ ,TRUE ~ est_hsged),
est_somecollegeaa  =
case_when( check_somecollegeaa == 1 ~  NA_real_ ,TRUE ~ est_somecollegeaa),
est_bahigher  =
case_when( check_bahigher == 1 ~  NA_real_ ,TRUE ~ est_bahigher))
# Dropping those indicators
state_edu <- state_edu %>% select(-check_hsless,
-check_hsged,
-check_somecollegeaa,
-check_bahigher)
state_edu <- state_edu %>% mutate(
pct_hsless   = est_hsless/est_totpop,
pct_bahigher = est_bahigher/ est_totpop)
## Creating Lookup for Pop_id
aapi_alone<- c(1,12,50)
aapi_combo<- c(1,31,60)
## Converting it to LONG format
state_edu_long<- state_edu %>% select(-geoid)  %>%
gather(estimate_type,
estimate,
-geodisplaylabel,
-pop_id)
## Recoding state_edu_long$pop_id
state_edu_long$pop_id_rec <- as.character(state_edu_long$pop_id)
state_edu_long$pop_id_rec <- fct_recode(state_edu_long$pop_id_rec,
"State Pop" = "1",
"Asian" = "12",
"Asian" = "31",
"NHPI" = "50",
"NHPI" = "60")
## Recoding state_edu_long$estimate_type into state_edu_long$estimate_type_rec
state_edu_long$estimate_type_rec <- fct_recode(state_edu_long$estimate_type,
"Total Pop" = "est_totpop",
"HS or Less" = "est_hsless",
"HS Diploma" = "est_hsged",
"Some College or AA" = "est_somecollegeaa",
"BA or Higher" = "est_bahigher",
"% HS or Less"= "pct_hsless",
"% BA or Higher" = "pct_bahigher")
state_edu_alone_raw <- state_edu_long  %>%
filter(pop_id %in% aapi_alone) %>%
select(-pop_id,-estimate_type) %>%
filter(estimate_type_rec !="% BA or Higher") %>%
filter(estimate_type_rec !="% HS or Less")
state_edu_combo_raw <- state_edu_long  %>%
filter(pop_id %in% aapi_combo )%>%
select(-pop_id,-estimate_type)%>%
filter(estimate_type_rec !="% BA or Higher") %>%
filter(estimate_type_rec !="% HS or Less")
state_edu_alone_pct <- state_edu_long  %>%
filter(pop_id %in% aapi_alone) %>%
select(-pop_id,-estimate_type) %>%
filter(estimate_type_rec =="% BA or Higher" | estimate_type_rec =="% HS or Less")
state_edu_combo_pct <- state_edu_long  %>%
filter(pop_id %in% aapi_combo )%>%
select(-pop_id,-estimate_type)%>%
filter(estimate_type_rec =="% BA or Higher" | estimate_type_rec =="% HS or Less")
### FUNCTIONS ####
# Table for Just raw counts
state_create_table <- function(data){
data %>%
mutate(long_key=paste(pop_id_rec, estimate_type_rec, sep=": ")) %>% #Combining Pop_ID and Estimate type
select(-pop_id_rec, -estimate_type_rec) %>%
spread(long_key, estimate,fill = NA) %>%
rename(State= geodisplaylabel)
}
state_display_edu_raw <- function(data){
data %>%
datatable(extensions =
list("Buttons" = NULL, 'FixedColumns'= T, "Scroller"=T),
rownames= FALSE,
options = list(
dom = 'rtB',
buttons = c('copy', 'csv', 'excel'),
scrollX = TRUE,
fixedColumns = list(leftColumns = 1),
columnDefs = list(list(className = 'dt-head-left')),
lengthMenu = c(25, 50, 100), pageLength = 50)) %>%
formatCurrency(columns = c(2:16),currency = "", interval = 3, mark = ",", digits=0)
}
state_display_edu_pct <- function(data){
data %>%
datatable(extensions =
list("Buttons" = NULL, 'FixedColumns'= T, "Scroller"=T),
rownames= FALSE,
options = list(
dom = 'rtB',
buttons = c('copy', 'csv', 'excel'),
scrollX = TRUE,
fixedColumns = list(leftColumns = 1),
columnDefs = list(list(className = 'dt-head-left')),
lengthMenu = c(25, 50, 100), pageLength = 50)) %>%
formatPercentage(columns =(2:7),0)
}
### Calculating Average for the sentence
avg_hs_less <- state_edu %>% filter(pop_id == 1) %>% select(geodisplaylabel, pct_hsless) %>%  summarize(mean = mean(pct_hsless)) %>% pull() %>% round(.,4)
avg_hs_less <- avg_hs_less*100
avg_ba_higher <- state_edu %>% filter(pop_id == 1) %>% select(geodisplaylabel, pct_bahigher) %>%  summarize(mean = mean(pct_bahigher)) %>% pull() %>% round(.,4)
avg_ba_higher <- avg_ba_higher*100
mapdata <- get_data_from_map(download_map_data("countries/us/us-all"))
state_edu_table_pct <- state_edu_table_pct %>% mutate(value = `State Pop: % BA or Higher`*100, na.omit=T)
state_edu_table_pct <- state_edu_table_pct %>% mutate(value2 = `Asian: % BA or Higher`*100, na.omit=T)
state_edu_table_pct <- state_edu_table_pct %>% mutate(value3 = `NHPI: % BA or Higher`*100, na.omit=T)
data(fips.state)
fips.state <- fips.state %>% rename(State = STATE_NAME)
state_edu_table_pct<- state_edu_table_pct %>% inner_join(fips.state, by = "State")
x <- c("{point.name}:", "Asian Alone:","NHPI Alone:")
title<-"Percent BA or Higher"
y <- c(" {point.value:.1f}%", " {point.value2:.1f}%",
" {point.value3:.1f}%")
style <- "style=font-size:80%"
highchart() %>%
hc_title(text = "Bachelors Degree or Higher", align = "center") %>%
hc_subtitle(text = "Source: 2011-2015 ACS using Asian/NHPI Alone", align = "center") %>%
hc_chart(backgroundColor = "#ffffff") %>%
hc_add_series_map(usgeojson, state_edu_table_pct, name = "Education",value = "value", joinBy = c("postalcode", "STUSAB"),
borderColor= "null",
borderWidth= 0) %>%
hc_tooltip(pointFormat = tooltip_table(x,y,title), useHTML=T,  headerFormat= "")%>%
hc_add_theme(hc_theme_538()) %>%
hc_colorAxis(stops = color_stops(),labels= list(format = "{value}%"),showInLegend=T) %>%
hc_legend(title = list(text= "Statewide Percentage", fontStyle ='italic'),align = "center",verticalAlign = "bottom",
layout = "horizontal", padding = 5)
