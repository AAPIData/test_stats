scale_fill_viridis(name = "Temp. [F]", option = "C") +
labs(title = 'Temperatures in Lincoln NE',
subtitle = 'Mean temperatures (Fahrenheit) by month for 2016\nData: Original CSV from the Weather Underground') +
theme_ridges(font_size = 13, grid = TRUE) + theme(axis.title.y = element_blank())
lincoln_weather
data.frame(lincoln_weather)
test<-data.frame(lincoln_weather)
View(test)
library(tidyverse)
rmcs_dta <- read_csv("~/Downloads/rmcs_2010.dta")
library(haven)
rmcs_dta <- read_dta("~/Downloads/rmcs_2010.dta")
View(rmcs_dta)
View(rmcs_dta)
gc()
library(tidyverse)
library(haven)
library(tidyverse)
library(haven)
rmcs_dta <- read_dta("~/Downloads/rmcs_2010.dta")
pryr::object_size(rmcs_dta)
View(rmcs_dta)
library(highcharter)
mapdata <- get_data_from_map(download_map_data("countries/us/us-all"))
glimpse(mapdata)
data_fake <- mapdata %>%
select(code = `hc-a2`) %>%
mutate(value = 1e5 * abs(rt(nrow(.), df = 10)))
View(data_fake)
hcmap("countries/us/us-all", data = data_fake, value = "value",
joinBy = c("hc-a2", "code"), name = "Fake data",
dataLabels = list(enabled = TRUE, format = '{point.name}'),
borderColor = "#FAFAFA", borderWidth = 0.1,
tooltip = list(valueDecimals = 2, valuePrefix = "$", valueSuffix = " USD"))
rmcs_dta %>% group_by(STATE) %>% summarise(total_cong <- total(T001_001))
rmcs_dta %>% group_by(STATE) %>% summarise(total_cong <- sum(T001_001))
rmcs_dta %>% group_by(STATE) %>% summarise(totalpop <- sum(T001_001,
total_rel <- sum(T002_001)))
rmcs_dta %>% group_by(STATE) %>% summarise(totalpop =sum(T001_001,
total_rel = sum(T002_001)))
rmcs_dta %>% group_by(STATE) %>%
summarise(totalpop =sum(T001_001),
total_rel = sum(T002_001))
rmcs_dta %>% group_by(STATE) %>%
summarise(totalpop =sum(T001_001),
total_rel = sum(T002_001)) %>% mutate(proportion = total_rel/totalpop)
overall_relig<- rmcs_dta %>% group_by(STATE) %>%
summarise(totalpop =sum(T001_001),
total_rel = sum(T002_001)) %>% mutate(proportion = total_rel/totalpop)
overall_relig<- rmcs_dta %>% group_by(STABBR) %>%
summarise(totalpop =sum(T001_001),
total_rel = sum(T002_001)) %>% mutate(proportion = total_rel/totalpop)
source('~/.active-rstudio-document', echo=TRUE)
hcmap("countries/us/us-all", data = overall_relig, value = "proportion",
joinBy = c("hc-a2", "STABBR"), name = "overall_relig",
dataLabels = list(enabled = TRUE, format = '{point.name}'),
borderColor = "#FAFAFA", borderWidth = 0.1,
tooltip = list(valueDecimals = 2))
hcmap("countries/us/us-all", data = overall_relig, value = "proportion",
joinBy = c("hc-a2", "STABBR"), name = "overall_relig",
dataLabels = list(enabled = TRUE, format = '{point.name}'),
borderColor = "#FAFAFA", borderWidth = 0.1,
tooltip = list(valueDecimals = 5))
sc_map <- map_data("county",region="south.carolina")
ggplot() + geom_polygon(aes(x=long,y=lat,group=group),data=sc_map,colour="white",fill="black") + theme_minimal()
View(sc_map)
install.packages(c("choroplethr", "choroplethrMaps"))
library(choroplethr)
library(choroplethrMaps)
county_choropleth(df_pop_county)
data(df_pop_county)
county_choropleth(df_pop_county)
View(df_pop_county)
overall_relig<- rmcs_dta %>% mutate(proportion = total_rel/totalpop) %>% select(FIPS, proportion)
overall_relig<- rmcs_dta %>% mutate(proportion = T001_002/T001_001) %>% select(FIPS, proportion)
overall_relig<- rmcs_dta %>% mutate(proportion = T002_001 / T001_001) %>% select(FIPS, proportion)
overall_relig<- rmcs_dta %>% mutate(proportion = T002_001 / T001_001) %>% select(as.integer(FIPS), proportion)
overall_relig<- rmcs_dta %>% mutate(proportion = T002_001 / T001_001) %>% select(as.integer(FIPS), proportion)
overall_relig<- rmcs_dta %>% mutate(proportion = T002_001 / T001_001) %>% select(FIPS, proportion)
overall_relig$FIPS <- as.numeric(overall_relig$FIPS)
county_choropleth(overall_relig)
overall_relig <- overall_relig%>% rename(region = FIPS, value = proportion)
county_choropleth(overall_relig)
muslim_relig<- rmcs_dta %>% mutate(muslim_adherence = NV016_017) %>% select(FIPS, proportion)
muslim_relig<- rmcs_dta %>% mutate(muslim_adherence = NV016_017) %>% select(FIPS, muslim_adherence)
rmcs_dta$FIPS <- as.numeric(rmcs_dta$FIPS)
muslim_relig<- rmcs_dta %>% mutate(muslim_adherence = NV016_017) %>% select(FIPS, muslim_adherence)
muslim_relig<- rmcs_dta %>% mutate(value = NV016_017) %>% select(FIPS, muslim_adherence)
muslim_relig <- muslim_relig%>% rename(region = FIPS)
county_choropleth(muslim_relig)
View(muslim_relig)
View(muslim_relig)
muslim_relig<- rmcs_dta %>% mutate(value = NV016_017) %>% select(FIPS, value)
muslim_relig <- muslim_relig%>% rename(region = FIPS)
county_choropleth(muslim_relig)
county_choropleth(muslim_relig,num_colors = 1)
muslim_relig<- rmcs_dta %>% filter(NV016_017>0)%>%mutate(value = NV016_017) %>% select(FIPS, value)
muslim_relig <- muslim_relig%>% rename(region = FIPS)
county_choropleth(muslim_relig)
county_choropleth(overall_relig)
library(tidyverse)
library(haven)
library(highcharter)
rmcs_dta <- read_dta("~/Downloads/rmcs_2010.dta")
pryr::object_size(rmcs_dta)
rmcs_dta$FIPS <- as.numeric(rmcs_dta$FIPS)
overall_relig<- rmcs_dta %>% mutate(proportion = T002_001 / T001_001) %>% select(FIPS, proportion)
muslim_relig<- rmcs_dta %>% filter(NV016_017>0)%>%mutate(value = NV016_017) %>% select(FIPS, value)
muslim_relig <- muslim_relig%>% rename(region = FIPS)
#overall_relig$FIPS <- as.numeric(overall_relig$FIPS)
overall_relig <- overall_relig%>% rename(region = FIPS, value = proportion)
county_choropleth(overall_relig)
library(choroplethr)
library(choroplethrMaps)
rmcs_dta$FIPS <- as.numeric(rmcs_dta$FIPS)
overall_relig<- rmcs_dta %>% mutate(proportion = T002_001 / T001_001) %>% select(FIPS, proportion)
muslim_relig<- rmcs_dta %>% filter(NV016_017>0)%>%mutate(value = NV016_017) %>% select(FIPS, value)
muslim_relig <- muslim_relig%>% rename(region = FIPS)
#overall_relig$FIPS <- as.numeric(overall_relig$FIPS)
overall_relig <- overall_relig%>% rename(region = FIPS, value = proportion)
county_choropleth(overall_relig)
library(tidyverse)
mosques_dta<- read_csv("~/Dropbox/religious_context/Code/Data/IRS_data/mosques.csv")
mosques_subset<- mosques_dta %>% select(EIN, NAME, TAX_PERIOD)
mosques_subset$EIN
base_url<- "https://projects.propublica.org/nonprofits/api/v2/organizations/"
mosques_subset<- mosques_subset %>% mutate(
req_url = paste(base_url,mosques_subset$EIN,".json",sep="")
)
function(req_url) {
response_output <- GET(req_url)
if (identical(text, "")) warn("No output to parse.")
fromJSON(text)
}
json_parse <- function(req) {
text <- content(req, as = "text", encoding = "UTF-8")
if (identical(text, "")) warn("No output to parse.")
fromJSON(text)
}
testresult<- GET("https://projects.propublica.org/nonprofits/api/v2/organizations/142007220.json")
testresult$status_code
testresult$request$headers
output2<-content(testresult,as = "text")
parsed_json <- output2 %>% fromJSON()
names(parsed_json)
output3<- parsed_json$filings_with_data
parsed_json$filings_without_data
parsed_json$data_source
library(tidyverse)
library(httr)
library(jsonlite)
testresult<- GET("https://projects.propublica.org/nonprofits/api/v2/organizations/142007220.json")
testresult$status_code
testresult$request$headers
output2<-content(testresult,as = "text")
parsed_json <- output2 %>% fromJSON()
names(parsed_json)
output3<- parsed_json$filings_with_data
parsed_json$filings_without_data
parsed_json$data_source
View(testresult)
View(parsed_json)
View(parsed_json)
View(parsed_json)
View(parsed_json[["filings_with_data"]])
parsed_json[["organization"]]
parsed_json$organization
d <- data.frame(
id = c(1, 2),
json = c(
'{"user":"xyz1","weightmap": {"P1":0,"P2":100}, "domains":["a1","b1"]}',
'{"user":"xyz2","weightmap": {"P1":100,"P2":0}, "domains":["a2","b2"]}'
),
stringsAsFactors = FALSE
)
d %>%
mutate(json = map(json, ~ fromJSON(.) %>% as.data.frame())) %>%
unnest(json)
View(d)
View(testresult)
parsed_json$organization %>% map_chr(c("eid"))
parsed_json$organization %>% map_chr(c("eid"))
whatis1<-parsed_json$organization
parsed_json$organization %>% map(c("eid"))
parsed_json$organization %>% map(c("eid"))
what22<_ parsed_json$organization %>% map(c("eid"))
what22<- parsed_json$organization %>% map(c("eid"))
View(what22)
got_chars
map_df(whatis1, extract, c("eid"))
whatis1
whatis1
library(repurrrsive)
library(listviewer)
install.packages("repurrrsive")
install.packages("listviewer")
library(purrr)
library(repurrrsive)
library(listviewer)
map(got_chars[1:4], "name")
got_chars
what<-got_chars
View(what)
View(mosques_subset)
mosques_subset_small <- slice(mosques_subset,1:10)
requests2<-mosques_subset_small$req_url
pro_publicaresults <- list()
#test1<- json_parse(requests[1])
#requests2<- requests[1:10]
for (url in requests2) {
print(url)
tmp <- json_parse(url)
name <- paste(url)
pro_publicaresults[[name]]<-tmp
}
json_parse <- function(req_url) {
req <- GET(req_url)
text <- content(req, as = "text", encoding = "UTF-8")
if (identical(text, "")) warn("No output to parse.")
fromJSON(text)
}
for (url in requests2) {
print(url)
tmp <- json_parse(url)
name <- paste(url)
pro_publicaresults[[name]]<-tmp
}
View(pro_publicaresults)
View(pro_publicaresults)
View(pro_publicaresults)
library(tidyverse)
library(httr)
library(jsonlite)
# Grab Mosque Data
mosques_dta<- read_csv("~/Dropbox/religious_context/Code/Data/IRS_data/mosques.csv")
mosques_subset<- mosques_dta %>% select(EIN, NAME, TAX_PERIOD)
write_csv(mosques_subset, "mosques_subset.csv")
#preparing EINs of mosques
mosques_subset$EIN
base_url<- "https://projects.propublica.org/nonprofits/api/v2/organizations/"
mosques_subset<- mosques_subset %>% mutate(
req_url = paste(base_url,mosques_subset$EIN,".json",sep="")
)
json_parse <- function(req_url) {
req <- GET(req_url)
text <- content(req, as = "text", encoding = "UTF-8")
if (identical(text, "")) warn("No output to parse.")
fromJSON(text)
}
mosques_subset_small <- slice(mosques_subset,1:10)
requests2<-mosques_subset_small$req_url
pro_publicaresults <- list()
#test1<- json_parse(requests[1])
#requests2<- requests[1:10]
for (url in requests2) {
print(url)
tmp <- json_parse(url)
name <- paste(url)
pro_publicaresults[[name]]<-tmp
}
library(repurrrsive)
library(listviewer)
View(pro_publicaresults)
# List results
rm(pro_publicaresults)
pro_publicaresults <- list()
#test1<- json_parse(requests[1])
#requests2<- requests[1:10]
for (url in requests2) {
print(url)
tmp <- json_parse(url)
pro_publicaresults[[name]]<-tmp
}
View(pro_publicaresults)
rm(pro_publicaresults)
pro_publicaresults <- list()
#test1<- json_parse(requests[1])
#requests2<- requests[1:10]
for (url in requests2) {
print(url)
tmp <- json_parse(url)
name <- paste(url)
pro_publicaresults[[name]]<-tmp
}
what<-got_chars
View(what)
library(tidyverse)
library(httr)
library(jsonlite)
# Grab Mosque Data
mosques_dta<- read_csv("~/Dropbox/religious_context/Code/Data/IRS_data/mosques.csv")
mosques_subset<- mosques_dta %>% select(EIN, NAME, TAX_PERIOD)
write_csv(mosques_subset, "mosques_subset.csv")
#preparing EINs of mosques
mosques_subset$EIN
base_url<- "https://projects.propublica.org/nonprofits/api/v2/organizations/"
mosques_subset<- mosques_subset %>% mutate(
req_url = paste(base_url,mosques_subset$EIN,".json",sep="")
)
mosques_subset_small <- slice(mosques_subset,1:10)
requests2<-mosques_subset_small$req_url
json_parse <- function(req_url) {
req <- GET(req_url)
text <- content(req, as = "text", encoding = "UTF-8")
if (identical(text, "")) warn("No output to parse.")
fromJSON(text)
}
# List results
rm(pro_publicaresults)
pro_publicaresults <- list()
#test1<- json_parse(requests[1])
#requests2<- requests[1:10]
for (url in requests2) {
print(url)
tmp <- json_parse(url)
name <- paste(url)
pro_publicaresults[[name]]<-tmp
}
map(pro_publicaresults, "eid")
got_chars
library(repurrrsive)
library(listviewer)
what<-got_chars
View(what)
map(what, "name")
map(pro_publicaresults, "id")
View(pro_publicaresults)
map(pro_publicaresults, "data_source")
pro_publicaresults %>%
map() %>%
map_df(bind_rows)
pro_publicaresults %>%
map(.f) %>%
map_df(bind_rows)
pro_publicaresults %>%
map("eid") %>%
map_df(bind_rows)
View(pro_publicaresults)
testresult<- GET("https://projects.propublica.org/nonprofits/api/v2/organizations/142007220.json")
output2<-content(testresult,as = "text")
parsed_json <- output2 %>% fromJSON()
View(parsed_json)
rm(pro_publicaresults)
pro_publicaresults <- list()
#test1<- json_parse(requests[1])
#requests2<- requests[1:10]
for (url in requests2) {
print(url)
tmp <- json_parse(url)
org_dta<-tmp$organization
name <- paste(url)
pro_publicaresults[[name]]<-org_dta
}
View(pro_publicaresults)
View(pro_publicaresults)
pro_publicaresults %>%
map("eid") %>%
map_df(bind_rows)
pro_publicaresults %>%
map("eid")
pro_publicaresults
pro_publicaresults %>%
map("organization")
View(pro_publicaresults)
map(pro_publicaresults, "ein")
map_df(pro_publicaresults, extract, c("eid"))
map_df(pro_publicaresults, extract, c("ein"))
map_df(pro_publicaresults, extract, c("ein","name"))
map_df(got_chars, extract, c("name"))
View(what)
map_df(got_chars, extract, c("name","gender"))
map_df(got_chars, extract, c("name", "culture", "gender", "id", "born", "alive"))
map_df(got_chars, extract, c("name", "culture", "gender", "id", "born", "alive"))
library(magrittr)
map_df(got_chars, extract, c("name", "culture", "gender", "id", "born", "alive"))
out_put<-map_df(got_chars, extract, c("name", "culture", "gender", "id", "born", "alive"))
View(out_put)
out_put<-map_df(pro_publicaresults, extract, c("ein","name"))
out_put<-map_df(pro_publicaresults, extract, c("ein","name"))
View(out_put)
View(pro_publicaresults)
keys<-names(pro_publicaresults[["https://projects.propublica.org/nonprofits/api/v2/organizations/454269198.json"]])
out_put<-map_df(pro_publicaresults, extract, keys)
out_put<-map_df(pro_publicaresults, extract,c("ein", "name","address","city","state","zipcode"))
View(out_put)
out_put<-map_df(pro_publicaresults, extract,c("ein", "name","address","city","state",
"zipcode","asset_amount","revenue_amount"))
out_put<-map_df(pro_publicaresults, extract,c("ein", "name","address","city","state",
"zipcode","asset_amount"))
View(pro_publicaresults)
library(tibble)
got_chars %>% {
tibble(
name = map_chr(., "name"),
culture = map_chr(., "culture"),
gender = map_chr(., "gender"),
id = map_int(., "id"),
born = map_chr(., "born"),
alive = map_lgl(., "alive")
)
}
pro_publicaresults %>% {
tibble(
ein = map_chr(., "culture")
name = map_chr(., "name"),
address = map_chr(., "address"),
city = map_chr(., "city"),
state = map_chr(., "state"),
zipcode = map_chr(., "zipcode"),
asset_amount= map_int(.,"asset_amount")
)
}
pro_publicaresults %>% {
tibble(
ein = map_chr(., "culture")
name = map_chr(., "name"),
address = map_chr(., "address"),
city = map_chr(., "city"),
state = map_chr(., "state"),
zipcode = map_chr(., "zipcode"),
asset_amount= map_int(.,"asset_amount")
)
}
pro_publicaresults %>% {
tibble(
ein = map_chr(., "ein"),
name = map_chr(., "name"),
address = map_chr(., "address"),
city = map_chr(., "city"),
state = map_chr(., "state"),
zipcode = map_chr(., "zipcode"),
asset_amount= map_int(.,"asset_amount")
)
}
pro_publicaresults$`https://projects.propublica.org/nonprofits/api/v2/organizations/454269198.json`$asset_amount
type(pro_publicaresults$`https://projects.propublica.org/nonprofits/api/v2/organizations/454269198.json`$asset_amount)
is.atomic(pro_publicaresults$`https://projects.propublica.org/nonprofits/api/v2/organizations/454269198.json`$asset_amount)
pro_publicaresults %>% {
tibble(
ein = map_chr(., "ein"),
name = map_chr(., "name"),
address = map_chr(., "address"),
city = map_chr(., "city"),
state = map_chr(., "state"),
zipcode = map_chr(., "zipcode"),
asset_amount= try(map_int(.,"asset_amount"))
)
}
out_put<-pro_publicaresults %>% {
tibble(
ein = map_chr(., "ein"),
name = map_chr(., "name"),
address = map_chr(., "address"),
city = map_chr(., "city"),
state = map_chr(., "state"),
zipcode = map_chr(., "zipcode"),
asset_amount= try(map_int(.,"asset_amount"))
)
}
out_put<-pro_publicaresults %>% {
tibble(
ein = map_chr(., "ein"),
name = map_chr(., "name"),
address = map_chr(., "address"),
city = map_chr(., "city"),
state = map_chr(., "state"),
zipcode = map_chr(., "zipcode"),
asset_amount= try(map_int(.,"asset_amount"))
)
}
View(out_put)
out_put<-pro_publicaresults %>% {
tibble(
ein = map_chr(., "ein"),
name = map_chr(., "name"),
address = map_chr(., "address"),
city = map_chr(., "city"),
state = map_chr(., "state"),
zipcode = map_chr(., "zipcode"),
asset_amount= safely(map_int(.,"asset_amount"))
)
}
View(out_put)
out_put<-pro_publicaresults %>% {
tibble(
ein = map_chr(., "ein"),
name = map_chr(., "name"),
address = map_chr(., "address"),
city = map_chr(., "city"),
state = map_chr(., "state"),
zipcode = map_chr(., "zipcode"),
asset_amount= safely(map_int(.,"asset_amount"))
)
}
View(mosques_subset)
write_csv(mosques_subset, "mosques_subset.csv")
install.packages("citr")
setwd("~/quick_stats")
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("~/quick_stats/")
#render your sweet site.
rmarkdown::render_site()
setwd("~/quick_stats/")
topics = c("Poverty","Nativity","Education","Insurance")
for(topic in topics)
rmarkdown::render(input = "report_template.Rmd",
output_file = paste0("state/",topic,".html"),
params = list(topic = topic)
)
